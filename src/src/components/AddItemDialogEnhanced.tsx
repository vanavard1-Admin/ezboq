import { useState, useMemo } from "react";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetDescription, SheetTrigger } from "./ui/sheet";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { CatalogItem, BOQItem } from "../types/boq";
import { Plus, Search, Package, X, ChevronRight, Sparkles, TrendingUp, Home, Edit3, Layers } from "lucide-react";
import { Badge } from "./ui/badge";
import { Card } from "./ui/card";
import { Separator } from "./ui/separator";
import { ScrollArea } from "./ui/scroll-area";
import { RoomTemplateDialog } from "./RoomTemplateDialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";

interface AddItemDialogEnhancedProps {
  catalog: CatalogItem[];
  onAdd: (
    name: string,
    category: string,
    subcategory: string,
    unit: string,
    material: number,
    labor: number,
    quantity: number,
    notes?: string
  ) => void;
  onAddMultiple?: (items: Omit<BOQItem, "id">[]) => void;
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô - ‡πÉ‡∏´‡∏°‡πà! ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const CATEGORY_GROUPS = [
  {
    title: "‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á",
    icon: "üèóÔ∏è",
    categories: [
      { id: "‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà", name: "üèóÔ∏è ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà", isRoom: false },
      { id: "‡∏á‡∏≤‡∏ô‡∏î‡∏¥‡∏ô", name: "‚õèÔ∏è ‡∏á‡∏≤‡∏ô‡∏î‡∏¥‡∏ô", isRoom: false },
      { id: "‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á", name: "üèõÔ∏è ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á", isRoom: false },
      { id: "‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å", name: "üè¢ ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡πå‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å", isRoom: false },
      { id: "‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏†‡∏≤‡∏¢‡πÉ‡∏ô", name: "üè† ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô", isRoom: false },
      { id: "‡∏£‡∏∞‡∏ö‡∏ö MEP", name: "‚öôÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö MEP", isRoom: false },
      { id: "‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å/‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏±‡∏®‡∏ô‡πå", name: "üå≥ ‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏±‡∏®‡∏ô‡πå", isRoom: false },
      { id: "room:‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô", name: "üõèÔ∏è ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô", isRoom: true },
      { id: "room:‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", name: "üöø ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", isRoom: true },
      { id: "room:‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß", name: "üç≥ ‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß", isRoom: true },
      { id: "room:‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô", name: "üõãÔ∏è ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô", isRoom: true },
      { id: "room:‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß", name: "üçΩÔ∏è ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß", isRoom: true },
      { id: "room:‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß", name: "üëî ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß", isRoom: true },
      { id: "room:‡∏´‡πâ‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏•‡πâ‡∏≤‡∏á", name: "üß∫ ‡∏´‡πâ‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏•‡πâ‡∏≤‡∏á", isRoom: true },
    ]
  },
  {
    title: "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£/‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà",
    icon: "üçΩÔ∏è",
    categories: [
      { id: "‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ß - ‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏π‡∏î‡∏Ñ‡∏ß‡∏±‡∏ô", name: "üç≥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏π‡∏î‡∏Ñ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡∏ß" },
      { id: "‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πä‡∏™‡∏´‡∏∏‡∏á‡∏ï‡πâ‡∏°", name: "üî• ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πä‡∏™‡∏Ñ‡∏£‡∏±‡∏ß" },
      { id: "‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å/‡∏ã‡∏¥‡∏á‡∏Ñ‡πå/‡∏™‡∏∏‡∏Ç‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•‡∏Ñ‡∏£‡∏±‡∏ß", name: "üíß ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå/‡∏™‡∏∏‡∏Ç‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•" },
      { id: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå", name: "üçΩÔ∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß" },
      { id: "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô/‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏¢‡πá‡∏ô", name: "‚ùÑÔ∏è ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏¢‡πá‡∏ô" },
      { id: "‡∏ú‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞", name: "üßº ‡∏ú‡∏¥‡∏ß‡∏û‡∏∑‡πâ‡∏ô-‡∏Ñ‡∏£‡∏±‡∏ß" },
      { id: "‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå/‡∏ü‡∏¥‡∏ï‡πÄ‡∏≠‡∏≤‡∏ï‡πå ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£", name: "ü™ë ‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏£‡πâ‡∏≤‡∏ô" },
      { id: "‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏õ‡πâ‡∏≤‡∏¢", name: "ü™ß ‡∏õ‡πâ‡∏≤‡∏¢-‡πÑ‡∏ü‡∏õ‡πâ‡∏≤‡∏¢" },
    ]
  },
  {
    title: "‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å/‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
    icon: "üè•",
    categories: [
      { id: "‡∏ú‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å/‡∏™‡∏∏‡∏Ç‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢", name: "üè• ‡∏ú‡∏¥‡∏ß‡∏û‡∏∑‡πâ‡∏ô-‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å" },
      { id: "‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πä‡∏™‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå", name: "‚öïÔ∏è ‡πÅ‡∏Å‡πä‡∏™‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå" },
      { id: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏ã‡πÄ‡∏£‡∏¢‡πå/‡∏Å‡∏±‡∏ô‡∏£‡∏±‡∏á‡∏™‡∏µ", name: "‚ò¢Ô∏è ‡∏Å‡∏±‡∏ô‡∏£‡∏±‡∏á‡∏™‡∏µ X-Ray" },
      { id: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å/‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏°", name: "ü¶∑ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å" },
      { id: "HVAC ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏∞‡∏≠‡∏≤‡∏î/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô", name: "üå¨Ô∏è HVAC ‡∏™‡∏∞‡∏≠‡∏≤‡∏î" },
    ]
  },
  {
    title: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°",
    icon: "üõèÔ∏è",
    categories: [
      { id: "‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° (FF&E)", name: "üõèÔ∏è FF&E ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å" },
      { id: "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°", name: "üöø ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°" },
      { id: "‡πÇ‡∏ñ‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô/‡∏ä‡∏±‡πâ‡∏ô‡∏û‡∏±‡∏Å", name: "üö™ ‡πÇ‡∏ñ‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô" },
      { id: "‡∏ã‡∏±‡∏Å‡∏£‡∏µ‡∏î/‡∏Ñ‡∏£‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á (BOH)", name: "üß∫ BOH ‡∏ã‡∏±‡∏Å‡∏£‡∏µ‡∏î" },
    ]
  },
  {
    title: "‡∏£‡∏µ‡πÄ‡∏ó‡∏•/‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®",
    icon: "üè¨",
    categories: [
      { id: "‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô/‡∏ü‡∏≤‡∏ã‡∏≤‡∏î‡∏£‡∏µ‡πÄ‡∏ó‡∏•", name: "üè¨ ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏£‡∏µ‡πÄ‡∏ó‡∏•" },
      { id: "‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á/‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå", name: "üõí ‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á-‡πÅ‡∏Ñ‡∏ä" },
      { id: "‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®/‡∏Å‡∏±‡πâ‡∏ô‡∏´‡πâ‡∏≠‡∏á/‡∏û‡∏∑‡πâ‡∏ô‡∏¢‡∏Å", name: "üè¢ ‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®" },
    ]
  },
  {
    title: "‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°/‡∏Ñ‡∏•‡∏±‡∏á",
    icon: "üì¶",
    categories: [
      { id: "‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏ö/‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©", name: "üß™ ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏ö" },
      { id: "‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏Å‡∏∂‡πà‡∏á‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏ö‡∏≤", name: "üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" },
    ]
  },
  {
    title: "Wellness & Beauty",
    icon: "üíÜ",
    categories: [
      { id: "‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™/‡∏¢‡∏¥‡∏°", name: "üí™ ‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™" },
      { id: "‡∏™‡∏õ‡∏≤/‡∏ã‡∏≤‡∏•‡∏≠‡∏ô", name: "üíÜ ‡∏™‡∏õ‡∏≤-‡∏ã‡∏≤‡∏•‡∏≠‡∏ô" },
    ]
  },
  {
    title: "‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©",
    icon: "‚ö°",
    categories: [
      { id: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á/‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢", name: "üìπ ‡∏Å‡∏•‡πâ‡∏≠‡∏á-‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢" },
      { id: "‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏±‡∏Ñ‡∏Ñ‡∏µ‡∏†‡∏±‡∏¢", name: "üö® ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏±‡∏Ñ‡∏Ñ‡∏µ‡∏†‡∏±‡∏¢" },
      { id: "‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏π‡∏á", name: "‚ö° ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏π‡∏á" },
      { id: "‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Ñ‡∏ô‡∏û‡∏¥‡∏Å‡∏≤‡∏£/‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏", name: "‚ôø Accessibility" },
      { id: "‡∏£‡∏∞‡∏ö‡∏ö‡∏ü‡∏≤‡∏ã‡∏≤‡∏î/‡∏Å‡∏±‡∏ô‡πÅ‡∏î‡∏î", name: "üèóÔ∏è ‡∏ü‡∏≤‡∏ã‡∏≤‡∏î" },
      { id: "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢/‡∏Ç‡∏¢‡∏∞", name: "üóëÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏∞" },
    ]
  },
  {
    title: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    icon: "üìã",
    categories: [
      { id: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ", name: "üìã ‡∏≠‡∏∑‡πà‡∏ô‡πÜ" },
    ]
  },
];

// ‡∏™‡∏£‡πâ‡∏≤‡∏á flat list ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
const ALL_CATEGORIES = CATEGORY_GROUPS.flatMap(group => group.categories);

// ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏á
const MAIN_CATEGORIES = [
  "‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á",
  "‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å",
  "‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏†‡∏≤‡∏¢‡πÉ‡∏ô",
  "‡∏£‡∏∞‡∏ö‡∏ö MEP",
  "‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å/‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏±‡∏®‡∏ô‡πå",
  "‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà",
  "‡∏á‡∏≤‡∏ô‡∏î‡∏¥‡∏ô",
  "‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå/‡∏ü‡∏¥‡∏ï‡πÄ‡∏≠‡∏≤‡∏ï‡πå ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
  "‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ß - ‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏π‡∏î‡∏Ñ‡∏ß‡∏±‡∏ô",
  "‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πä‡∏™‡∏´‡∏∏‡∏á‡∏ï‡πâ‡∏°",
  "‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å/‡∏ã‡∏¥‡∏á‡∏Ñ‡πå/‡∏™‡∏∏‡∏Ç‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•‡∏Ñ‡∏£‡∏±‡∏ß",
  "‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏õ‡πâ‡∏≤‡∏¢",
  "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á/‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢",
  "‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏±‡∏Ñ‡∏Ñ‡∏µ‡∏†‡∏±‡∏¢",
  "‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
];

// ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢
const COMMON_UNITS = [
  { value: "m2", label: "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£ (m¬≤)" },
  { value: "m", label: "‡πÄ‡∏°‡∏ï‡∏£ (m)" },
  { value: "m3", label: "‡∏•‡∏π‡∏Å‡∏ö‡∏≤‡∏®‡∏Å‡πå‡πÄ‡∏°‡∏ï‡∏£ (m¬≥)" },
  { value: "pcs", label: "‡∏ä‡∏¥‡πâ‡∏ô (pcs)" },
  { value: "set", label: "‡∏ä‡∏∏‡∏î (set)" },
  { value: "kg", label: "‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏° (kg)" },
  { value: "point", label: "‡∏à‡∏∏‡∏î (point)" },
  { value: "job", label: "‡∏á‡∏≤‡∏ô (job)" },
  { value: "ton", label: "‡∏ï‡∏±‡∏ô (ton)" },
  { value: "bag", label: "‡∏ñ‡∏∏‡∏á (bag)" },
  { value: "can", label: "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á (can)" },
  { value: "liter", label: "‡∏•‡∏¥‡∏ï‡∏£ (L)" },
  { value: "roll", label: "‡∏°‡πâ‡∏ß‡∏ô (roll)" },
  { value: "sheet", label: "‡πÅ‡∏ú‡πà‡∏ô (sheet)" },
];

// Room-based filtering - ‡πÅ‡∏°‡∏û‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
const ROOM_KEYWORDS: Record<string, string[]> = {
  "room:‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô": [
    "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô", "bedroom", "‡πÄ‡∏ï‡∏µ‡∏¢‡∏á", "bed", "‡∏ï‡∏π‡πâ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤", "wardrobe", 
    "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡πâ‡∏ß‡∏≠‡∏¥‡∏ô", "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡∏•‡∏ó‡πå‡∏≠‡∏¥‡∏ô", "built-in", "built in", "walk-in", "closet",
    "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô", "‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô", "‡∏ú‡∏ô‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô", "‡∏û‡∏∑‡πâ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô",
    "‡πÅ‡∏≠‡∏£‡πå", "‡∏ó‡πà‡∏≠‡πÅ‡∏≠‡∏£‡πå", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "air", "split", "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÑ‡∏•‡∏ó‡πå", "‡πÇ‡∏Ñ‡∏°‡πÑ‡∏ü",
    "‡∏û‡∏∑‡πâ‡∏ô‡πÑ‡∏°‡πâ", "‡∏•‡∏≤‡∏°‡∏¥‡πÄ‡∏ô‡∏ï", "laminate", "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á 60x60", "‡∏ö‡∏±‡∏ß‡∏û‡∏∑‡πâ‡∏ô", "molding",
    "‡∏ó‡∏≤‡∏™‡∏µ", "‡∏™‡∏µ", "paint", "‡∏â‡∏≤‡∏ö‡∏õ‡∏π‡∏ô", "‡∏ú‡∏ô‡∏±‡∏á", "wall", "soft-close", "‡∏ö‡∏≤‡∏ô‡∏û‡∏±‡∏ö", "hinge",
    "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏†‡∏≤‡∏¢‡πÉ‡∏ô", "hdf", "door", "‡∏õ‡∏•‡∏±‡πä‡∏Å", "‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå", "‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", "‡πÇ‡∏Ñ‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÑ‡∏•‡∏ó‡πå",
    "‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å", "drawer", "‡∏ï‡∏π‡πâ", "cabinet", "‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á", "shelf", "shelving",
    "‡∏£‡∏≤‡∏ß‡πÅ‡∏Ç‡∏ß‡∏ô", "hanging rod", "rail", "‡πÇ‡∏ï‡πä‡∏∞‡∏´‡∏±‡∏ß‡πÄ‡∏ï‡∏µ‡∏¢‡∏á", "bedside table", "nightstand",
    "‡∏ï‡∏π‡πâ‡∏ó‡∏µ‡∏ß‡∏µ", "tv cabinet", "‡∏ï‡∏π‡πâ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", "bookshelf"
  ],
  "room:‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥": [
    "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", "bathroom", "‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå", "sanitary", "‡∏ä‡∏±‡∏Å‡πÇ‡∏Ñ‡∏£‡∏Å", "‡∏™‡πâ‡∏ß‡∏°", "‡πÇ‡∏ñ‡∏™‡πâ‡∏ß‡∏°", "toilet", "wc",
    "‡∏≠‡πà‡∏≤‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤", "‡∏ã‡∏¥‡∏á‡∏Ñ‡πå", "lavatory", "basin", "washbasin", "‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡πÄ‡∏á‡∏≤", "mirror",
    "‡∏ä‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå", "shower", "‡∏ù‡∏±‡∏Å‡∏ö‡∏±‡∏ß", "‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥", "‡∏Å‡πä‡∏≠‡∏Å", "faucet", "tap", "mixer", "‡πÄ‡∏£‡∏ô‡∏ä‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå", "rain shower",
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô", "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ú‡∏ô‡∏±‡∏á", "‡∏Å‡∏±‡∏ô‡∏•‡∏∑‡πà‡∏ô", "tile", "floor tile", "wall tile",
    "‡∏Å‡∏±‡∏ô‡∏ã‡∏∂‡∏°", "waterproof", "‡∏ó‡πà‡∏≠‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡πâ‡∏á", "‡∏ó‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏õ‡∏≤", "drain", "pipe", "‡∏ï‡∏∞‡πÅ‡∏Å‡∏£‡∏á", "‡∏™‡∏∞‡∏î‡∏∑‡∏≠", "floor drain",
    "‡∏â‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡∏à‡∏Å", "‡∏â‡∏≤‡∏Å‡∏Å‡∏±‡πâ‡∏ô‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥", "shower screen", "‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥", "‡∏≠‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥", "bathtub",
    "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", "pvc", "‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πâ‡∏ô", "waterproof", 
    "‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á", "shelf", "shelving", "‡∏£‡∏≤‡∏ß‡πÅ‡∏Ç‡∏ß‡∏ô", "towel bar", "towel rack",
    "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡πâ‡∏ß‡∏≠‡∏¥‡∏ô", "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡∏•‡∏ó‡πå‡∏≠‡∏¥‡∏ô", "built-in", "‡∏ï‡∏π‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á", "storage cabinet", "‡∏ï‡∏π‡πâ‡πÉ‡∏ï‡πâ‡∏≠‡πà‡∏≤‡∏á", "vanity",
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏ô‡πâ‡∏≥‡∏≠‡∏∏‡πà‡∏ô", "‡∏ô‡πâ‡∏≥‡∏≠‡∏∏‡πà‡∏ô", "heater", "water heater", "‡∏ó‡πà‡∏≠ ppr", "ppr pipe",
    "‡∏û‡∏±‡∏î‡∏•‡∏°‡∏£‡∏∞‡∏ö‡∏≤‡∏¢", "‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "exhaust", "ventilation", "fan",
    "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡πà‡∏≤‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤", "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡∏Å‡πä‡∏≠‡∏Å", "s-trap", "p-trap", "‡∏ß‡∏≤‡∏•‡πå‡∏ß", "valve"
  ],
  "room:‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß": [
    "‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß", "‡∏Ñ‡∏£‡∏±‡∏ß", "kitchen", "‡∏ï‡∏π‡πâ‡∏Ñ‡∏£‡∏±‡∏ß", "‡∏ï‡∏π‡πâ‡∏ö‡∏ô", "‡∏ï‡∏π‡πâ‡∏•‡πà‡∏≤‡∏á", "upper cabinet", "lower cabinet",
    "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡πâ‡∏ß‡∏≠‡∏¥‡∏ô", "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡∏•‡∏ó‡πå‡∏≠‡∏¥‡∏ô", "built-in", "built in",
    "‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå", "counter", "countertop", "top", "‡∏ó‡πá‡∏≠‡∏õ", "‡∏´‡∏¥‡∏ô‡πÅ‡∏Å‡∏£‡∏ô‡∏¥‡∏ï", "granite", "‡∏Ñ‡∏ß‡∏≠‡∏ï‡∏ã‡πå", "quartz",
    "‡∏ã‡∏¥‡∏á‡∏Ñ‡πå", "sink", "‡∏•‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏ô", "wash basin", "‡∏Å‡πä‡∏≠‡∏Å‡∏Ñ‡∏£‡∏±‡∏ß", "‡∏Å‡πä‡∏≠‡∏Å‡∏ú‡∏™‡∏°", "kitchen faucet", "mixer",
    "‡∏Æ‡∏π‡∏î", "hood", "‡∏î‡∏π‡∏î‡∏Ñ‡∏ß‡∏±‡∏ô", "exhaust", "‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "ventilation",
    "‡πÄ‡∏ï‡∏≤‡πÅ‡∏Å‡πä‡∏™", "‡πÄ‡∏ï‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", "‡πÄ‡∏ï‡∏≤‡∏≠‡∏ö", "stove", "gas stove", "oven",
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß", "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ú‡∏ô‡∏±‡∏á‡∏Ñ‡∏£‡∏±‡∏ß", "backsplash", "wall tile", "kitchen tile",
    "‡∏ö‡πà‡∏≠‡∏î‡∏±‡∏Å‡πÑ‡∏Ç‡∏°‡∏±‡∏ô", "‡∏î‡∏±‡∏Å‡πÑ‡∏Ç‡∏°‡∏±‡∏ô", "grease trap", "‡∏ó‡πà‡∏≠‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡πâ‡∏á", "drain",
    "‡∏ï‡∏π‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á", "cabinet", "storage", "‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å", "drawer", "‡∏ö‡∏≤‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô", "sliding door", 
    "‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á", "shelf", "shelving", "‡∏£‡∏≤‡∏ß‡πÅ‡∏Ç‡∏ß‡∏ô", "hanging rod",
    "‡πÑ‡∏ü‡πÉ‡∏ï‡πâ‡∏ï‡∏π‡πâ", "‡πÑ‡∏ü‡πÄ‡∏™‡πâ‡∏ô", "led", "under cabinet light", "‡∏õ‡∏•‡∏±‡πä‡∏Å", "plug",
    "‡πÅ‡∏ú‡πà‡∏ô‡∏ß‡∏≤‡∏á‡πÄ‡∏ï‡∏≤", "‡πÅ‡∏ó‡πà‡∏ô‡∏ß‡∏≤‡∏á‡πÄ‡∏ï‡∏≤", "stove platform", "‡πÇ‡∏Ñ‡∏£‡∏á‡πÑ‡∏°‡πâ‡∏≠‡∏±‡∏î", "melamine", "‡πÄ‡∏°‡∏•‡∏≤‡∏°‡∏µ‡∏ô",
    "hmr", "‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å", "‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏´‡πâ‡∏á", "wet kitchen", "dry kitchen",
    "‡∏ï‡∏π‡πâ‡∏™‡∏π‡∏á", "tall cabinet", "pantry", "‡∏ï‡∏π‡πâ‡∏ä‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "beverage cabinet"
  ],
  "room:‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô": [
    "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô", "‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏Ç‡∏Å", "living", "living room", "‡πÇ‡∏ã‡∏ü‡∏≤", "sofa",
    "‡∏ù‡πâ‡∏≤", "‡∏ù‡πâ‡∏≤‡πÄ‡∏û‡∏î‡∏≤‡∏ô", "‡πÄ‡∏û‡∏î‡∏≤‡∏ô", "ceiling", "‡∏¢‡∏¥‡∏õ‡∏ã‡∏±‡πà‡∏°", "‡∏¢‡∏¥‡∏õ‡∏ã‡∏±‡∏°", "gypsum", "drywall",
    "‡∏ó‡∏≤‡∏™‡∏µ", "‡∏™‡∏µ", "paint", "painting", "‡∏ú‡∏ô‡∏±‡∏á", "wall", "acrylic",
    "‡∏û‡∏∑‡πâ‡∏ô", "floor", "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á", "tile", "‡πÑ‡∏°‡πâ‡∏•‡∏≤‡∏°‡∏¥‡πÄ‡∏ô‡∏ï", "laminate", "flooring",
    "‡∏ö‡∏±‡∏ß", "‡∏ö‡∏±‡∏ß‡∏ù‡πâ‡∏≤", "‡∏ö‡∏±‡∏ß‡∏û‡∏∑‡πâ‡∏ô", "molding", "cornice", "skirting",
    "‡πÇ‡∏Ñ‡∏°‡πÑÔøΩÔøΩÔøΩ", "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÑ‡∏•‡∏ó‡πå", "downlight", "‡πÇ‡∏Ñ‡∏°‡πÅ‡∏ú‡∏á", "panel light", "spotlight", "light",
    "‡πÑ‡∏ü‡∏ã‡πà‡∏≠‡∏ô", "‡πÑ‡∏ü‡πÄ‡∏™‡πâ‡∏ô", "led", "led strip", "cove light", "bulkhead",
    "‡πÅ‡∏≠‡∏£‡πå", "air", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "air conditioner", "‡∏ó‡πà‡∏≠‡πÅ‡∏≠‡∏£‡πå", "split",
    "‡∏õ‡∏•‡∏±‡πä‡∏Å", "plug", "outlet", "‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå", "switch", "‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", "electrical",
    "‡∏ú‡∏ô‡∏±‡∏á‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á", "feature wall", "‡πÑ‡∏°‡πâ‡∏à‡∏£‡∏¥‡∏á", "real wood", "finger-joint", "wood panel",
    "‡πÇ‡∏Ñ‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÑ‡∏•‡∏ó‡πå", "‡πÇ‡∏Ñ‡∏°‡πÑ‡∏ü‡∏†‡∏≤‡∏¢‡πÉ‡∏ô",
    // ‡∏ö‡∏¥‡πâ‡∏ß‡∏≠‡∏¥‡∏ô
    "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡πâ‡∏ß‡∏≠‡∏¥‡∏ô", "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡∏•‡∏ó‡πå‡∏≠‡∏¥‡∏ô", "built-in", "‡∏ï‡∏π‡πâ‡∏ó‡∏µ‡∏ß‡∏µ", "tv cabinet", "‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á", "shelf",
    "‡∏ï‡∏π‡πâ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", "bookshelf"
  ],
  
  "room:‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß": [
    "‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß", "‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "dining", "dining room", "‡πÇ‡∏ï‡πä‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "dining table",
    "‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡πâ‡∏µ", "chair", "‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á", "seating",
    "‡∏ù‡πâ‡∏≤", "‡∏ù‡πâ‡∏≤‡πÄ‡∏û‡∏î‡∏≤‡∏ô", "ceiling", "‡∏¢‡∏¥‡∏õ‡∏ã‡∏±‡∏°", "gypsum",
    "‡∏ó‡∏≤‡∏™‡∏µ", "‡∏™‡∏µ", "paint", "‡∏ú‡∏ô‡∏±‡∏á", "wall",
    "‡∏û‡∏∑‡πâ‡∏ô", "floor", "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á", "tile", "‡πÑ‡∏°‡πâ‡∏•‡∏≤‡∏°‡∏¥‡πÄ‡∏ô‡∏ï", "laminate",
    "‡∏ö‡∏±‡∏ß", "‡∏ö‡∏±‡∏ß‡∏ù‡πâ‡∏≤", "‡∏ö‡∏±‡∏ß‡∏û‡∏∑‡πâ‡∏ô", "molding", "skirting",
    "‡πÇ‡∏Ñ‡∏°‡πÑ‡∏ü", "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÑ‡∏•‡∏ó‡πå", "downlight", "‡πÇ‡∏Ñ‡∏°‡∏£‡∏∞‡∏¢‡πâ‡∏≤", "chandelier", "pendant light",
    "‡πÑ‡∏ü‡∏ã‡πà‡∏≠‡∏ô", "‡πÑ‡∏ü‡πÄ‡∏™‡πâ‡∏ô", "led", "cove light",
    "‡πÅ‡∏≠‡∏£‡πå", "air conditioner", "‡∏ó‡πà‡∏≠‡πÅ‡∏≠‡∏£‡πå",
    "‡∏õ‡∏•‡∏±‡πä‡∏Å", "plug", "‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå", "switch", "‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
    "‡∏ú‡∏ô‡∏±‡∏á‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á", "feature wall", "‡πÑ‡∏°‡πâ‡∏à‡∏£‡∏¥‡∏á", "wood panel",
    // ‡∏ö‡∏¥‡πâ‡∏ß‡∏≠‡∏¥‡∏ô
    "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡πâ‡∏ß‡∏≠‡∏¥‡∏ô", "built-in", "‡∏ï‡∏π‡πâ‡πÇ‡∏ä‡∏ß‡πå", "display cabinet", "‡∏ï‡∏π‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á", "storage",
    "‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á", "shelf", "‡∏ï‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß", "sideboard", "buffet"
  ],
  
  "room:‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß": [
    "‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß", "‡∏´‡πâ‡∏≠‡∏á walk-in", "walk-in closet", "dressing room", "wardrobe room",
    "‡∏ï‡∏π‡πâ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤", "wardrobe", "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡πâ‡∏ß‡∏≠‡∏¥‡∏ô", "built-in", "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡∏•‡∏ó‡πå‡∏≠‡∏¥‡∏ô", "closet",
    "walk-in", "‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á", "shelf", "shelving", "‡∏£‡∏≤‡∏ß‡πÅ‡∏Ç‡∏ß‡∏ô", "hanging rod", "rail",
    "‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å", "drawer", "‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡πÄ‡∏á‡∏≤", "mirror", "‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡∏ö‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà", "full length mirror",
    "‡πÇ‡∏ï‡πä‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏õ‡πâ‡∏á", "dressing table", "vanity", "makeup table",
    "‡∏û‡∏∑‡πâ‡∏ô", "floor", "‡πÑ‡∏°‡πâ‡∏•‡∏≤‡∏°‡∏¥‡πÄ‡∏ô‡∏ï", "laminate", "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á", "tile",
    "‡∏ó‡∏≤‡∏™‡∏µ", "paint", "‡∏ú‡∏ô‡∏±‡∏á", "wall", "‡∏â‡∏≤‡∏ö‡∏õ‡∏π‡∏ô",
    "‡πÇ‡∏Ñ‡∏°‡πÑ‡∏ü", "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÑ‡∏•‡∏ó‡πå", "downlight", "‡πÑ‡∏ü‡πÄ‡∏™‡πâ‡∏ô", "led", "led strip",
    "‡∏õ‡∏•‡∏±‡πä‡∏Å", "plug", "‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå", "switch",
    // ‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå
    "soft-close", "‡∏ö‡∏≤‡∏ô‡∏û‡∏±‡∏ö", "hinge", "‡∏£‡∏≤‡∏á", "track", "‡∏ö‡∏≤‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô", "sliding door",
    "‡∏°‡∏∑‡∏≠‡∏à‡∏±‡∏ö", "handle", "knob", "‡∏•‡∏π‡∏Å‡∏ö‡∏¥‡∏î"
  ],
  
  "room:‡∏´‡πâ‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏•‡πâ‡∏≤‡∏á": [
    "‡∏´‡πâ‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏•‡πâ‡∏≤‡∏á", "‡∏´‡πâ‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏£‡∏µ‡∏î", "laundry", "laundry room", "utility room",
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤", "washing machine", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏ö‡∏ú‡πâ‡∏≤", "dryer",
    "‡∏ã‡∏¥‡∏á‡∏Ñ‡πå", "sink", "‡∏≠‡πà‡∏≤‡∏á‡∏•‡πâ‡∏≤‡∏á", "wash basin", "‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥", "faucet", "tap",
    "‡∏ó‡πà‡∏≠‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡πâ‡∏á", "drain", "‡∏ó‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏õ‡∏≤", "water pipe", "‡∏ó‡πà‡∏≠ pvc",
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô", "floor tile", "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ú‡∏ô‡∏±‡∏á", "wall tile", "‡∏Å‡∏±‡∏ô‡∏ã‡∏∂‡∏°", "waterproof",
    "‡∏ó‡∏≤‡∏™‡∏µ", "paint", "‡∏ú‡∏ô‡∏±‡∏á", "wall", "‡∏â‡∏≤‡∏ö‡∏õ‡∏π‡∏ô",
    "‡∏û‡∏±‡∏î‡∏•‡∏°‡∏£‡∏∞‡∏ö‡∏≤‡∏¢", "exhaust fan", "‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "ventilation",
    "‡πÇ‡∏Ñ‡∏°‡πÑ‡∏ü", "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÑ‡∏•‡∏ó‡πå", "downlight", "light",
    "‡∏õ‡∏•‡∏±‡πä‡∏Å", "plug", "outlet", "‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå", "switch",
    "‡∏£‡∏≤‡∏ß‡∏ï‡∏≤‡∏Å‡∏ú‡πâ‡∏≤", "drying rack", "‡∏£‡∏≤‡∏ß‡πÅ‡∏Ç‡∏ß‡∏ô", "hanging rod",
    // ‡∏ö‡∏¥‡πâ‡∏ß‡∏≠‡∏¥‡∏ô
    "‡∏ï‡∏π‡πâ‡∏ö‡∏¥‡πâ‡∏ß‡∏≠‡∏¥‡∏ô", "built-in", "‡∏ï‡∏π‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á", "storage cabinet", "‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á", "shelf",
    "‡∏ï‡∏π‡πâ‡∏ã‡∏±‡∏Å‡∏£‡∏µ‡∏î", "laundry cabinet", "‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå", "counter", "countertop"
  ]
};

export function AddItemDialogEnhanced({ catalog, onAdd, onAddMultiple }: AddItemDialogEnhancedProps) {
  const [open, setOpen] = useState(false);
  const [roomTemplateOpen, setRoomTemplateOpen] = useState(false);
  const [selectedItem, setSelectedItem] = useState<CatalogItem | null>(null);
  const [itemName, setItemName] = useState<string>("");
  const [quantity, setQuantity] = useState<string>("1");
  const [material, setMaterial] = useState<string>("0");
  const [labor, setLabor] = useState<string>("0");
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<string>("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
  const [activeTab, setActiveTab] = useState<"catalog" | "custom">("catalog");
  
  // Custom item form states
  const [customName, setCustomName] = useState("");
  const [customCategory, setCustomCategory] = useState("");
  const [customSubcategory, setCustomSubcategory] = useState("");
  const [customUnit, setCustomUnit] = useState("m2");
  const [customMaterial, setCustomMaterial] = useState("");
  const [customLabor, setCustomLabor] = useState("");
  const [customQuantity, setCustomQuantity] = useState("1");
  const [customNotes, setCustomNotes] = useState("");

  const handleSelectRoomTemplate = (items: Omit<BOQItem, "id">[]) => {
    if (onAddMultiple) {
      onAddMultiple(items);
    }
  };

  // Filtered catalog
  const filteredCatalog = useMemo(() => {
    let items = catalog;

    // Filter by category (including room-based filtering)
    if (selectedCategory !== "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") {
      // Check if it's a room category
      if (selectedCategory.startsWith("room:")) {
        const keywords = ROOM_KEYWORDS[selectedCategory] || [];
        items = items.filter(item => {
          const searchText = `${item.name} ${item.category} ${item.subcategory}`.toLowerCase();
          return keywords.some(keyword => searchText.includes(keyword.toLowerCase()));
        });
      } else {
        // Regular category filter
        items = items.filter(item => item.category === selectedCategory);
      }
    }

    // Filter by search
    if (searchTerm.trim()) {
      const query = searchTerm.toLowerCase();
      items = items.filter(item =>
        item.name.toLowerCase().includes(query) ||
        item.category.toLowerCase().includes(query) ||
        item.subcategory.toLowerCase().includes(query)
      );
    }

    // If no search, show popular items (sorted by price)
    if (!searchTerm.trim() && selectedCategory === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") {
      return [...items]
        .sort((a, b) => (b.material + b.labor) - (a.material + a.labor))
        .slice(0, 30);
    }

    return items.slice(0, 50);
  }, [catalog, searchTerm, selectedCategory]);

  const handleSelectItem = (item: CatalogItem) => {
    setSelectedItem(item);
    setItemName(item.name);
    setMaterial(item.material.toString());
    setLabor(item.labor.toString());
  };

  const handleAdd = () => {
    if (selectedItem && itemName.trim() && parseFloat(quantity) > 0) {
      onAdd(
        itemName.trim(),
        selectedItem.category,
        selectedItem.subcategory,
        selectedItem.unit,
        parseFloat(material) || 0,
        parseFloat(labor) || 0,
        parseFloat(quantity)
      );
      handleReset();
      setOpen(false);
    }
  };

  const handleAddCustom = () => {
    if (customName.trim() && customCategory && customSubcategory && parseFloat(customQuantity) > 0) {
      onAdd(
        customName.trim(),
        customCategory,
        customSubcategory,
        customUnit,
        parseFloat(customMaterial) || 0,
        parseFloat(customLabor) || 0,
        parseFloat(customQuantity),
        customNotes.trim() || undefined
      );
      handleResetCustom();
      setOpen(false);
    }
  };

  const handleReset = () => {
    setSelectedItem(null);
    setItemName("");
    setQuantity("1");
    setMaterial("0");
    setLabor("0");
    setSearchTerm("");
    setSelectedCategory("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
  };

  const handleResetCustom = () => {
    setCustomName("");
    setCustomCategory("");
    setCustomSubcategory("");
    setCustomUnit("m2");
    setCustomMaterial("");
    setCustomLabor("");
    setCustomQuantity("1");
    setCustomNotes("");
  };

  const totalUnitPrice = (parseFloat(material) || 0) + (parseFloat(labor) || 0);
  const totalPrice = totalUnitPrice * (parseFloat(quantity) || 0);

  return (
    <Sheet open={open} onOpenChange={(newOpen) => {
      setOpen(newOpen);
      if (!newOpen) handleReset();
    }}>
      <SheetTrigger asChild>
        <Button className="gap-2 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 shadow-lg hover:shadow-xl transition-all">
          <Plus className="h-4 w-4" />
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏
        </Button>
      </SheetTrigger>

      <SheetContent 
        side="right" 
        className="w-full sm:max-w-2xl p-0 flex flex-col"
      >
        {/* Header */}
        <SheetHeader className="flex-shrink-0 px-4 sm:px-6 py-4 border-b bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20">
          <div className="flex items-start justify-between gap-4">
            <div className="flex-1">
              <SheetTitle className="flex items-center gap-2">
                <Package className="h-5 w-5 text-blue-600" />
                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏
                <Badge variant="secondary">
                  {catalog.length.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                </Badge>
              </SheetTitle>
              <SheetDescription className="mt-1.5">
                ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å {catalog.length.toLocaleString()}+ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br/>
                <span className="text-green-600 font-medium">üí° ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡πâ‡∏≠‡∏á (‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô/‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥/‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß/‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á</span>
              </SheetDescription>
            </div>
            <Button
              variant="outline"
              size="sm"
              className="flex-shrink-0 gap-2 bg-gradient-to-r from-green-50 to-emerald-50 border-green-200 hover:bg-green-100 text-green-700"
              onClick={() => setRoomTemplateOpen(true)}
            >
              <Home className="h-4 w-4" />
              Template ‡∏´‡πâ‡∏≠‡∏á
            </Button>
          </div>
        </SheetHeader>

        {/* Room Template Dialog */}
        <RoomTemplateDialog
          open={roomTemplateOpen}
          onOpenChange={setRoomTemplateOpen}
          onSelectTemplate={handleSelectRoomTemplate}
        />

        {/* Main Content */}
        <div className="flex-1 overflow-hidden flex flex-col min-h-0">
          <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as "catalog" | "custom")} className="flex-1 flex flex-col">
            {/* Tabs Header */}
            <div className="flex-shrink-0 border-b bg-white dark:bg-gray-950">
              <TabsList className="w-full h-auto grid grid-cols-2 p-1">
                <TabsTrigger value="catalog" className="gap-2 py-3">
                  <Layers className="h-4 w-4" />
                  <span>‡∏à‡∏≤‡∏Å Catalog</span>
                  <Badge variant="secondary" className="text-xs">
                    {catalog.length.toLocaleString()}
                  </Badge>
                </TabsTrigger>
                <TabsTrigger value="custom" className="gap-2 py-3">
                  <Edit3 className="h-4 w-4" />
                  <span>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á</span>
                  <Badge variant="outline" className="text-xs">‡πÉ‡∏´‡∏°‡πà!</Badge>
                </TabsTrigger>
              </TabsList>
            </div>

            {/* Catalog Tab */}
            <TabsContent value="catalog" className="flex-1 flex flex-col mt-0 overflow-hidden">
              {!selectedItem ? (
                /* Step 1: Browse & Select Item */
                <>
                  {/* Search Bar - Fixed */}
                  <div className="flex-shrink-0 p-4 bg-white dark:bg-gray-950 border-b space-y-3">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                  <Input
                    autoFocus
                    placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£... (‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏π‡∏ô, ‡∏≠‡∏¥‡∏ê, ‡∏™‡∏µ, ‡πÄ‡∏´‡∏•‡πá‡∏Å)"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 pr-10 h-11 border-2 focus:border-blue-500"
                  />
                  {searchTerm && (
                    <button
                      onClick={() => setSearchTerm("")}
                      className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground"
                    >
                      <X className="h-5 w-5" />
                    </button>
                  )}
                </div>

                {/* Search hint */}
                <p className="text-xs text-muted-foreground flex items-center gap-1">
                  {searchTerm ? (
                    <>‡∏û‡∏ö <strong className="text-blue-600">{filteredCatalog.length}</strong> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</>
                  ) : selectedCategory !== "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ? (
                    <>
                      {selectedCategory.startsWith("room:") ? (
                        <>‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö <strong className="text-green-600">{selectedCategory.replace("room:", "")}</strong> - {filteredCatalog.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</>
                      ) : (
                        <>‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î <strong className="text-blue-600">{selectedCategory}</strong> - {filteredCatalog.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</>
                      )}
                    </>
                  ) : (
                    <>
                      <Sparkles className="h-3 w-3" />
                      ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° 30 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
                    </>
                  )}
                </p>
              </div>

              {/* Category Groups - NEW DESIGN! */}
              <div className="flex-shrink-0 border-b bg-gray-50/50 dark:bg-gray-900/50">
                <ScrollArea className="h-[280px]">
                  <div className="p-4 space-y-4">
                    {/* ‡∏õ‡∏∏‡πà‡∏° ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
                    <div>
                      <Button
                        variant={selectedCategory === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ? "default" : "outline"}
                        size="sm"
                        onClick={() => setSelectedCategory("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")}
                        className="rounded-full"
                      >
                        ‚ú® ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                      </Button>
                    </div>

                    {/* ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° */}
                    {CATEGORY_GROUPS.map((group, groupIndex) => (
                      <div key={groupIndex} className="space-y-2">
                        {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° */}
                        <div className="flex items-center gap-2">
                          <span className="text-lg">{group.icon}</span>
                          <span className="text-xs font-semibold text-muted-foreground uppercase tracking-wide">
                            {group.title}
                          </span>
                          <div className="flex-1 h-px bg-border" />
                        </div>

                        {/* ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° */}
                        <div className="flex flex-wrap gap-2">
                          {group.categories.map((cat) => {
                            const isRoom = (cat as any).isRoom;
                            const isSelected = selectedCategory === cat.id;
                            return (
                              <Button
                                key={cat.id}
                                variant={isSelected ? "default" : "outline"}
                                size="sm"
                                onClick={() => setSelectedCategory(cat.id)}
                                className={`rounded-full whitespace-nowrap ${
                                  isRoom && !isSelected
                                    ? "border-green-200 bg-green-50 hover:bg-green-100 text-green-700 dark:bg-green-950 dark:border-green-800 dark:text-green-300"
                                    : ""
                                } ${
                                  isRoom && isSelected
                                    ? "bg-green-600 hover:bg-green-700"
                                    : ""
                                }`}
                              >
                                {cat.name}
                              </Button>
                            );
                          })}
                        </div>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              </div>

              {/* Items List - Scrollable */}
              <div className="flex-1 border-b bg-white dark:bg-gray-950">
                <ScrollArea className="h-[400px]">
                  <div className="p-4 space-y-2">
                    {filteredCatalog.length === 0 ? (
                      <div className="text-center py-12 text-muted-foreground">
                        <Package className="h-12 w-12 mx-auto mb-3 opacity-30" />
                        <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>
                        <p className="text-sm mt-1">‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</p>
                      </div>
                    ) : (
                      filteredCatalog.map((item) => (
                        <ItemCardSimple
                          key={item.id}
                          item={item}
                          onClick={() => handleSelectItem(item)}
                          searchQuery={searchTerm}
                        />
                      ))
                    )}
                  </div>
                </ScrollArea>
              </div>
            </>
          ) : (
            /* Step 2: Edit & Confirm Item */
            <>
              {/* Back button */}
              <div className="flex-shrink-0 p-4 border-b bg-gray-50/50 dark:bg-gray-900/50">
                <Button
                  variant="ghost"
                  onClick={() => setSelectedItem(null)}
                  className="gap-2 h-9"
                >
                  ‚Üê ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô
                </Button>
              </div>

              {/* Form - Scrollable */}
              <div className="flex-1 border-b bg-white dark:bg-gray-950">
                <ScrollArea className="h-[500px]">
                  <div className="p-4 space-y-4">
                  {/* Selected Item Preview */}
                  <Card className="p-4 bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30 border-2 border-blue-300">
                    <div className="flex items-start gap-3 mb-3">
                      <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
                        <Package className="h-5 w-5 text-blue-600 dark:text-blue-300" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <h4 className="font-medium mb-2">{selectedItem.name}</h4>
                        <div className="flex flex-wrap gap-2">
                          <Badge variant="outline">{selectedItem.category}</Badge>
                          <Badge variant="secondary">{selectedItem.subcategory}</Badge>
                          <Badge className="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-200">
                            {selectedItem.unit}
                          </Badge>
                        </div>
                      </div>
                    </div>
                    <Separator className="my-3" />
                    <div className="grid grid-cols-3 gap-4 text-center">
                      <div>
                        <p className="text-xs text-muted-foreground mb-1">‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏</p>
                        <p className="font-semibold">‡∏ø{selectedItem.material.toLocaleString()}</p>
                      </div>
                      <div>
                        <p className="text-xs text-muted-foreground mb-1">‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á</p>
                        <p className="font-semibold">‡∏ø{selectedItem.labor.toLocaleString()}</p>
                      </div>
                      <div>
                        <p className="text-xs text-muted-foreground mb-1">‡∏£‡∏ß‡∏°/‡∏´‡∏ô‡πà‡∏ß‡∏¢</p>
                        <p className="font-semibold text-blue-600">
                          ‡∏ø{(selectedItem.material + selectedItem.labor).toLocaleString()}
                        </p>
                      </div>
                    </div>
                  </Card>

                  {/* Form Fields */}
                  <div className="space-y-4">
                    {/* Item Name */}
                    <div className="space-y-2">
                      <Label htmlFor="itemName">
                        ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ <span className="text-xs text-muted-foreground">(‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)</span>
                      </Label>
                      <Input
                        id="itemName"
                        value={itemName}
                        onChange={(e) => setItemName(e.target.value)}
                        placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£..."
                        className="h-11"
                      />
                    </div>

                    {/* Quantity */}
                    <div className="space-y-2">
                      <Label htmlFor="quantity" className="flex items-center gap-2">
                        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                        <Badge variant="outline" className="ml-auto">{selectedItem.unit}</Badge>
                      </Label>
                      <Input
                        id="quantity"
                        type="number"
                        min="0.01"
                        step="0.01"
                        value={quantity}
                        onChange={(e) => setQuantity(e.target.value)}
                        className="h-11"
                        placeholder="1.00"
                      />
                    </div>

                    {/* Material & Labor */}
                    <div className="grid grid-cols-2 gap-3">
                      <div className="space-y-2">
                        <Label htmlFor="material">‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏</Label>
                        <div className="relative">
                          <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">‡∏ø</span>
                          <Input
                            id="material"
                            type="number"
                            min="0"
                            step="0.01"
                            value={material}
                            onChange={(e) => setMaterial(e.target.value)}
                            className="h-11 pl-7"
                          />
                        </div>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="labor">‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á</Label>
                        <div className="relative">
                          <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">‡∏ø</span>
                          <Input
                            id="labor"
                            type="number"
                            min="0"
                            step="0.01"
                            value={labor}
                            onChange={(e) => setLabor(e.target.value)}
                            className="h-11 pl-7"
                          />
                        </div>
                      </div>
                    </div>

                    {/* Price Summary */}
                    <Card className="p-4 bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-950/20 dark:to-emerald-950/20 border-2 border-green-300">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm text-muted-foreground">‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢</span>
                        <span className="font-semibold">
                          ‡∏ø{totalUnitPrice.toLocaleString(undefined, { minimumFractionDigits: 2 })}
                        </span>
                      </div>
                      <div className="flex items-center justify-between mb-3">
                        <span className="text-sm text-muted-foreground">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</span>
                        <span className="font-semibold">
                          {parseFloat(quantity) || 0} {selectedItem.unit}
                        </span>
                      </div>
                      <Separator className="my-3" />
                      <div className="flex items-center justify-between">
                        <span className="font-bold">‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                        <span className="text-2xl font-bold text-green-600">
                          ‡∏ø{totalPrice.toLocaleString(undefined, { minimumFractionDigits: 2 })}
                        </span>
                      </div>
                    </Card>
                  </div>
                  </div>
                </ScrollArea>
              </div>
            </>
          )}
            </TabsContent>

            {/* Custom Tab - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á */}
            <TabsContent value="custom" className="flex-1 flex flex-col mt-0 overflow-hidden">
                <div className="flex-1 border-b bg-white dark:bg-gray-950">
                  <ScrollArea className="h-[600px]">
                    <div className="p-6 space-y-6">
                    {/* Header Info */}
                    <div className="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/20 dark:to-pink-950/20 border-2 border-purple-200 dark:border-purple-900 rounded-lg p-4">
                      <div className="flex items-start gap-3">
                        <Edit3 className="h-5 w-5 text-purple-600 mt-0.5" />
                        <div>
                          <h3 className="font-semibold text-purple-900 dark:text-purple-100 mb-1">
                            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                          </h3>
                          <p className="text-sm text-purple-700 dark:text-purple-300">
                            ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏á
                          </p>
                        </div>
                      </div>
                    </div>

                    {/* Form Fields */}
                    <div className="space-y-5">
                      {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
                      <div className="space-y-2">
                        <Label htmlFor="customName" className="flex items-center gap-2">
                          ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ <span className="text-red-500">*</span>
                        </Label>
                        <Input
                          id="customName"
                          value={customName}
                          onChange={(e) => setCustomName(e.target.value)}
                          placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡∏£‡∏ô‡∏¥‡∏ï‡πÇ‡∏ï 80x80 ‡∏ã‡∏°."
                          className="h-11"
                          autoFocus
                        />
                      </div>

                      {/* ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢ */}
                      <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="customCategory" className="flex items-center gap-2">
                            ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å <span className="text-red-500">*</span>
                          </Label>
                          <Select value={customCategory} onValueChange={setCustomCategory}>
                            <SelectTrigger id="customCategory" className="h-11">
                              <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î..." />
                            </SelectTrigger>
                            <SelectContent>
                              {MAIN_CATEGORIES.map((cat) => (
                                <SelectItem key={cat} value={cat}>
                                  {cat}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="customSubcategory" className="flex items-center gap-2">
                            ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢ <span className="text-red-500">*</span>
                          </Label>
                          <Input
                            id="customSubcategory"
                            value={customSubcategory}
                            onChange={(e) => setCustomSubcategory(e.target.value)}
                            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏∑‡πâ‡∏ô, ‡∏ú‡∏ô‡∏±‡∏á, ‡∏ù‡πâ‡∏≤"
                            className="h-11"
                          />
                        </div>
                      </div>

                      {/* ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡πÅ‡∏•‡∏∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô */}
                      <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="customUnit">‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö</Label>
                          <Select value={customUnit} onValueChange={setCustomUnit}>
                            <SelectTrigger id="customUnit" className="h-11">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              {COMMON_UNITS.map((unit) => (
                                <SelectItem key={unit.value} value={unit.value}>
                                  {unit.label}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="customQuantity" className="flex items-center gap-2">
                            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô <span className="text-red-500">*</span>
                          </Label>
                          <Input
                            id="customQuantity"
                            type="number"
                            min="0.01"
                            step="0.01"
                            value={customQuantity}
                            onChange={(e) => setCustomQuantity(e.target.value)}
                            className="h-11"
                            placeholder="1.00"
                          />
                        </div>
                      </div>

                      <Separator />

                      {/* ‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏ ‡πÅ‡∏•‡∏∞ ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á */}
                      <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="customMaterial">‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏ (‡∏ø/‡∏´‡∏ô‡πà‡∏ß‡∏¢)</Label>
                          <div className="relative">
                            <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">‡∏ø</span>
                            <Input
                              id="customMaterial"
                              type="number"
                              min="0"
                              step="0.01"
                              value={customMaterial}
                              onChange={(e) => setCustomMaterial(e.target.value)}
                              className="h-11 pl-7"
                              placeholder="0.00"
                            />
                          </div>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="customLabor">‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á (‡∏ø/‡∏´‡∏ô‡πà‡∏ß‡∏¢)</Label>
                          <div className="relative">
                            <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">‡∏ø</span>
                            <Input
                              id="customLabor"
                              type="number"
                              min="0"
                              step="0.01"
                              value={customLabor}
                              onChange={(e) => setCustomLabor(e.target.value)}
                              className="h-11 pl-7"
                              placeholder="0.00"
                            />
                          </div>
                        </div>
                      </div>

                      {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
                      <div className="space-y-2">
                        <Label htmlFor="customNotes">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)</Label>
                        <Input
                          id="customNotes"
                          value={customNotes}
                          onChange={(e) => setCustomNotes(e.target.value)}
                          placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏µ, ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠, ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏û‡∏¥‡πÄ‡∏®‡∏©"
                          className="h-11"
                        />
                      </div>

                      {/* Price Summary */}
                      {(parseFloat(customMaterial) > 0 || parseFloat(customLabor) > 0) && parseFloat(customQuantity) > 0 && (
                        <Card className="p-5 bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-950/20 dark:to-emerald-950/20 border-2 border-green-300">
                          <div className="space-y-3">
                            <div className="flex items-center justify-between text-sm">
                              <span className="text-muted-foreground">‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢</span>
                              <span className="font-semibold">
                                ‡∏ø{((parseFloat(customMaterial) || 0) + (parseFloat(customLabor) || 0)).toLocaleString(undefined, { minimumFractionDigits: 2 })}
                              </span>
                            </div>
                            <div className="flex items-center justify-between text-sm">
                              <span className="text-muted-foreground">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</span>
                              <span className="font-semibold">
                                {parseFloat(customQuantity) || 0} {customUnit}
                              </span>
                            </div>
                            <Separator />
                            <div className="flex items-center justify-between">
                              <span className="font-bold">‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                              <span className="text-2xl font-bold text-green-600">
                                ‡∏ø{(((parseFloat(customMaterial) || 0) + (parseFloat(customLabor) || 0)) * (parseFloat(customQuantity) || 0)).toLocaleString(undefined, { minimumFractionDigits: 2 })}
                              </span>
                            </div>
                          </div>
                        </Card>
                      )}
                    </div>
                    </div>
                  </ScrollArea>
                </div>

                {/* Footer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Custom Tab */}
                <div className="flex-shrink-0 p-4 border-t-4 border-purple-500 bg-gradient-to-b from-purple-50 to-white dark:from-purple-950/30 dark:to-gray-950 shadow-[0_-8px_20px_-4px_rgba(168,85,247,0.4)]">
                  <div className="flex gap-3">
                    <Button
                      variant="outline"
                      onClick={handleResetCustom}
                      className="flex-1 h-12 border-2"
                    >
                      ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
                    </Button>
                    <Button
                      onClick={handleAddCustom}
                      disabled={!customName.trim() || !customCategory || !customSubcategory || parseFloat(customQuantity) <= 0}
                      className="flex-[2] h-12 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 gap-2 shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <Plus className="h-5 w-5" />
                      <span className="font-bold">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                      {(parseFloat(customMaterial) > 0 || parseFloat(customLabor) > 0) && parseFloat(customQuantity) > 0 && (
                        <Badge variant="secondary" className="ml-2 bg-yellow-100 text-purple-800 font-bold">
                          ‡∏ø{(((parseFloat(customMaterial) || 0) + (parseFloat(customLabor) || 0)) * (parseFloat(customQuantity) || 0)).toLocaleString(undefined, { maximumFractionDigits: 0 })}
                        </Badge>
                      )}
                    </Button>
                  </div>
                </div>
              </TabsContent>
          </Tabs>
        </div>

        {/* Footer for Catalog Tab - when item selected */}
        {selectedItem && activeTab === "catalog" && (
          <div className="flex-shrink-0 p-4 border-t-4 border-green-500 bg-gradient-to-b from-green-50 to-white dark:from-green-950/30 dark:to-gray-950 shadow-[0_-8px_20px_-4px_rgba(34,197,94,0.4)]">
            <div className="flex gap-3">
              <Button
                variant="outline"
                onClick={() => setSelectedItem(null)}
                className="flex-1 h-12 border-2"
              >
                ‚Üê ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
              </Button>
              <Button
                onClick={handleAdd}
                disabled={!itemName.trim() || parseFloat(quantity) <= 0}
                className="flex-[2] h-12 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 gap-2 shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Plus className="h-5 w-5" />
                <span className="font-bold">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                {totalPrice > 0 && (
                  <Badge variant="secondary" className="ml-2 bg-yellow-100 text-green-800 font-bold">
                    ‡∏ø{totalPrice.toLocaleString(undefined, { maximumFractionDigits: 0 })}
                  </Badge>
                )}
              </Button>
            </div>
          </div>
        )}
      </SheetContent>
    </Sheet>
  );
}

// Simplified Item Card Component
function ItemCardSimple({
  item,
  onClick,
  searchQuery,
}: {
  item: CatalogItem;
  onClick: () => void;
  searchQuery: string;
}) {
  const totalPrice = item.material + item.labor;
  
  const highlightMatch = (text: string, query: string) => {
    if (!query.trim()) return text;
    const regex = new RegExp(`(${query})`, 'gi');
    const parts = text.split(regex);
    return parts.map((part, i) => 
      regex.test(part) ? <mark key={i} className="bg-yellow-200 dark:bg-yellow-800 px-1 rounded">{part}</mark> : part
    );
  };

  return (
    <button
      onClick={onClick}
      className="w-full p-3 rounded-lg border-2 border-gray-200 hover:border-blue-400 hover:bg-blue-50/50 dark:hover:bg-blue-950/20 transition-all text-left group"
    >
      <div className="flex items-center gap-3">
        <div className="flex-1 min-w-0">
          <div className="font-medium mb-1 line-clamp-2">
            {highlightMatch(item.name, searchQuery)}
          </div>
          <div className="flex items-center gap-2 text-xs text-muted-foreground mb-1">
            <span>{item.category}</span>
            <span>‚Ä¢</span>
            <span>{item.subcategory}</span>
          </div>
          <div className="flex items-center gap-2 text-xs">
            <Badge variant="outline" className="text-xs">
              ‡∏ß‡∏±‡∏™‡∏î‡∏∏ ‡∏ø{item.material.toLocaleString()}
            </Badge>
            <Badge variant="outline" className="text-xs">
              ‡πÅ‡∏£‡∏á ‡∏ø{item.labor.toLocaleString()}
            </Badge>
          </div>
        </div>
        <div className="flex-shrink-0 text-right">
          <div className="font-bold text-lg text-blue-600 dark:text-blue-400 mb-1">
            ‡∏ø{totalPrice.toLocaleString()}
          </div>
          <div className="text-xs text-muted-foreground">/{item.unit}</div>
          <ChevronRight className="h-5 w-5 text-muted-foreground group-hover:text-blue-600 group-hover:translate-x-1 transition-all mt-1 ml-auto" />
        </div>
      </div>
    </button>
  );
}
