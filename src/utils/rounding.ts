/**
 * üéØ EZBOQ Rounding Policy (Universal)
 * 
 * ‚úÖ P1: Uses Half-Up Rounding (NOT Banker's Rounding)
 * ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á Client + Edge Functions
 * ‚úÖ Decimal.js ROUND_HALF_UP (Standard Rounding)
 * 
 * ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ Half-Up Rounding:
 * - 0.5 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‚Üí ‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏°‡∏≠ (round up)
 * - ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 0.5 ‚Üí ‡∏õ‡∏±‡∏î‡∏•‡∏á (round down)
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Half-Up:
 * - 10.125 ‚Üí 10.13 (‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
 * - 10.124 ‚Üí 10.12 (‡∏õ‡∏±‡∏î‡∏•‡∏á)
 * - 10.500 ‚Üí 10.50 (‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
 * - 10.5 ‚Üí 11 (‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
 * - 11.5 ‚Üí 12 (‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà banker's)
 * 
 * ‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
 * - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Banker's Rounding (ROUND_HALF_EVEN)
 * - Banker's rounding ‡∏à‡∏∞‡∏õ‡∏±‡∏î 0.5 ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
 * - Half-Up ‡∏à‡∏∞‡∏õ‡∏±‡∏î 0.5 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏°‡∏≠ (‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
 * - ‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ä‡πâ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
 * - ‡πÉ‡∏ä‡πâ Decimal.js ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô floating-point errors
 * 
 * @version 2.0.0
 * @since 2025-10-28
 * @policy half-up
 */

import Decimal from 'decimal.js';

/**
 * Rounding Mode Configuration
 * 
 * ROUND_HALF_UP (4):
 * - Standard rounding ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
 * - 0.5 ‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏°‡∏≠
 * - ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á Math.round() ‡πÉ‡∏ô JavaScript
 */
export const ROUNDING_MODE = Decimal.ROUND_HALF_UP;

/**
 * Decimal Places for Money
 * - ‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ä‡πâ 2 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (‡∏ö‡∏≤‡∏ó + ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå)
 */
export const MONEY_DECIMALS = 2;

/**
 * Configure Decimal.js globally
 * ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á call ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô calculations
 */
export function configureDecimal() {
  Decimal.set({
    precision: 20,
    rounding: ROUNDING_MODE,
    toExpPos: 9e15,
    toExpNeg: -9e15,
    minE: -9e15,
    maxE: 9e15
  });
}

/**
 * Round decimal to money format (2 decimal places)
 * 
 * @param value - Decimal or number to round
 * @returns Rounded number with 2 decimals
 * 
 * @example
 * roundMoney(10.125) // 10.13
 * roundMoney(10.124) // 10.12
 * roundMoney(10.500) // 10.50
 */
export function roundMoney(value: Decimal | number): number {
  const decimal = value instanceof Decimal ? value : new Decimal(value);
  return decimal.toDecimalPlaces(MONEY_DECIMALS, ROUNDING_MODE).toNumber();
}

/**
 * Format number as Thai Baht currency
 * 
 * @param value - Number to format
 * @returns Formatted string (e.g., "1,234.56")
 */
export function formatMoney(value: number): string {
  return new Intl.NumberFormat('th-TH', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).format(value);
}

/**
 * Format number as Thai Baht with symbol
 * 
 * @param value - Number to format
 * @returns Formatted string (e.g., "‡∏ø1,234.56")
 */
export function formatMoneyWithSymbol(value: number): string {
  return `‡∏ø${formatMoney(value)}`;
}

/**
 * Test rounding policy
 * ‚úÖ Call this to verify rounding behavior
 */
export function testRoundingPolicy() {
  const testCases = [
    { input: 10.125, expected: 10.13 },
    { input: 10.124, expected: 10.12 },
    { input: 10.500, expected: 10.50 },
    { input: 10.501, expected: 10.50 },
    { input: 0.005, expected: 0.01 },
    { input: 0.004, expected: 0.00 },
  ];

  console.log('üß™ Testing EZBOQ Rounding Policy (ROUND_HALF_UP)');
  console.log('‚îÄ'.repeat(50));

  let allPassed = true;

  testCases.forEach(({ input, expected }) => {
    const result = roundMoney(input);
    const passed = result === expected;
    
    console.log(
      `${passed ? '‚úÖ' : '‚ùå'} roundMoney(${input}) = ${result} (expected ${expected})`
    );

    if (!passed) allPassed = false;
  });

  console.log('‚îÄ'.repeat(50));
  console.log(allPassed ? '‚úÖ All tests passed!' : '‚ùå Some tests failed!');

  return allPassed;
}

// Auto-configure Decimal.js on import
configureDecimal();

export default {
  ROUNDING_MODE,
  MONEY_DECIMALS,
  configureDecimal,
  roundMoney,
  formatMoney,
  formatMoneyWithSymbol,
  testRoundingPolicy,
};
