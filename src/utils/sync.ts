/**
 * üîÑ Sync Utility - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏ß‡∏î‡πå
 * 
 * ‡πÉ‡∏´‡πâ UX ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÇ‡∏î‡∏¢‡∏ö‡∏≠‡∏Å user ‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
 * ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏ß‡∏î‡πå‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
 */

import { toast } from 'sonner';

export type SyncResult<T> = 
  | { ok: true; data: T; status: 'synced' }
  | { ok: false; error: any; status: 'local-only' };

/**
 * üîÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ã‡∏¥‡∏á‡∏Å‡πå
 * 
 * ‡πÅ‡∏™‡∏î‡∏á toast ‡πÉ‡∏´‡πâ user ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤:
 * 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
 * 2. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏ß‡∏î‡πå
 * 3. ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à/‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
 * 
 * @example
 * const result = await saveWithSync(() => api.post('/profile', data));
 * if (result.ok) {
 *   setStatus('synced');
 * } else {
 *   setStatus('local-only');
 * }
 */
export async function saveWithSync<T>(
  work: () => Promise<T>,
  options?: {
    localMessage?: string;
    successMessage?: string;
    errorMessage?: string;
  }
): Promise<SyncResult<T>> {
  const {
    localMessage = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‚Ä¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Å‡πå...',
    successMessage = '‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏ß‡∏î‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úì',
    errorMessage = '‡∏ã‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Äî ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (Local only)',
  } = options || {};

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
  const toastId = toast.loading(localMessage);

  try {
    // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô sync
    const data = await work();
    
    // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    toast.success(successMessage, { id: toastId });
    
    return { ok: true, data, status: 'synced' };
  } catch (error: any) {
    // ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    console.error('Sync failed:', error);
    
    toast.error(errorMessage, { 
      id: toastId,
      description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≠‡∏á‡∏ã‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ',
      duration: 5000,
    });
    
    return { ok: false, error, status: 'local-only' };
  }
}

/**
 * üîÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á toast)
 * 
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
 */
export async function saveQuiet<T>(work: () => Promise<T>): Promise<SyncResult<T>> {
  try {
    const data = await work();
    return { ok: true, data, status: 'synced' };
  } catch (error: any) {
    console.error('Quiet sync failed:', error);
    return { ok: false, error, status: 'local-only' };
  }
}

/**
 * üîÑ ‡∏•‡∏≠‡∏á‡∏ã‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡∏°‡πà
 * 
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
 */
export async function retrySyncWithToast<T>(
  work: () => Promise<T>
): Promise<SyncResult<T>> {
  return saveWithSync(work, {
    localMessage: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡∏°‡πà...',
    successMessage: '‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‚úì',
    errorMessage: '‡∏¢‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á',
  });
}

/**
 * üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á badge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ sync
 */
export function getSyncBadge(status: 'synced' | 'local-only' | 'syncing'): {
  text: string;
  variant: 'default' | 'secondary' | 'destructive' | 'outline';
  icon: string;
} {
  switch (status) {
    case 'synced':
      return {
        text: '‡∏ã‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏•‡πâ‡∏ß',
        variant: 'default',
        icon: '‚úì',
      };
    case 'local-only':
      return {
        text: '‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
        variant: 'outline',
        icon: '‚ö†',
      };
    case 'syncing':
      return {
        text: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Å‡πå...',
        variant: 'secondary',
        icon: '‚è≥',
      };
    default:
      return {
        text: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
        variant: 'destructive',
        icon: '?',
      };
  }
}

/**
 * üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Component
 * 
 * @example
 * ```tsx
 * import { saveWithSync, getSyncBadge } from '@/utils/sync';
 * 
 * function ProfileEditor() {
 *   const [syncStatus, setSyncStatus] = useState<'synced' | 'local-only' | 'syncing'>('synced');
 * 
 *   const handleSave = async () => {
 *     setSyncStatus('syncing');
 *     
 *     const result = await saveWithSync(() => 
 *       api.put('/profile', formData)
 *     );
 *     
 *     setSyncStatus(result.status);
 *   };
 * 
 *   const badge = getSyncBadge(syncStatus);
 * 
 *   return (
 *     <div>
 *       <Badge variant={badge.variant}>
 *         {badge.icon} {badge.text}
 *       </Badge>
 *       <Button onClick={handleSave}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Button>
 *     </div>
 *   );
 * }
 * ```
 */
