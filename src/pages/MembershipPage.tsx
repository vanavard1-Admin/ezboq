import { useState, useEffect } from 'react';
import { motion } from 'motion/react';
import { Button } from '../components/ui/button';
import { Card } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { Switch } from '../components/ui/switch';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from '../components/ui/dialog';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
import {
  Crown,
  Zap,
  Check,
  X,
  Sparkles,
  ArrowLeft,
  CreditCard,
  QrCode,
  Calendar,
  TrendingUp,
  Shield,
  Award,
  Users,
  FileText,
  Clock,
  HelpCircle,
  Star,
  Infinity as InfinityIcon,
  Mail,
  Phone,
} from 'lucide-react';

const Infinity = InfinityIcon;
import { Membership, MembershipTier, MembershipPlan, PaymentRecord, BillingCycle } from '../types/boq';
import { toast } from 'sonner@2.0.3';
import { projectId, publicAnonKey } from '../utils/supabase/info';
import type { User as SupabaseUser } from '@supabase/supabase-js';

interface MembershipPageProps {
  onBack: () => void;
  user: SupabaseUser | null;
}

// Plans Configuration - ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏õ‡∏µ‡πÅ‡∏£‡∏Å!
const MEMBERSHIP_PLANS: MembershipPlan[] = [
  {
    tier: 'free',
    name: '‡∏ü‡∏£‡∏µ',
    price: 0,
    billingCycle: null,
    features: [
      '‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á BOQ ‡πÑ‡∏î‡πâ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å PDF ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
      '‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
      '‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏ó‡∏≤‡∏á Email',
    ],
    limits: {
      boqPerMonth: 1,
      users: 1,
      storage: '100 MB',
      support: 'email',
    },
  },
  {
    tier: 'individual_month',
    name: '‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß',
    price: 129,
    billingCycle: 'monthly',
    popular: true,
    features: [
      '‡∏™‡∏£‡πâ‡∏≤‡∏á BOQ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î',
      '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ + ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
      '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ/‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à',
      '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÅ‡∏•‡∏∞ QR Code',
      '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå',
      '‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏±‡∏Å ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢',
      '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥',
      '‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
    ],
    limits: {
      boqPerMonth: 'unlimited',
      users: 1,
      storage: '5 GB',
      support: 'priority',
    },
  },
  {
    tier: 'individual_year',
    name: '‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß',
    price: 1290,
    billingCycle: 'yearly',
    popular: true,
    savings: 17,
    features: [
      '‡∏™‡∏£‡πâ‡∏≤‡∏á BOQ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î',
      '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ + ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
      '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ/‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à',
      '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÅ‡∏•‡∏∞ QR Code',
      '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå',
      '‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏±‡∏Å ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢',
      '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥',
      '‚ú® ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î 17% (‡∏ø258)',
      '‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
    ],
    limits: {
      boqPerMonth: 'unlimited',
      users: 1,
      storage: '5 GB',
      support: 'priority',
    },
  },
  {
    tier: 'team_month',
    name: '‡∏ó‡∏µ‡∏°',
    price: 499,
    billingCycle: 'monthly',
    features: [
      'üë• 5 ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡∏°',
      '‡∏™‡∏£‡πâ‡∏≤‡∏á BOQ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î',
      '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ + ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
      '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ/‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à',
      '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÅ‡∏•‡∏∞ QR Code',
      '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå',
      '‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏±‡∏Å ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢',
      '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡∏°',
      '‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡∏°',
      '‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
    ],
    limits: {
      boqPerMonth: 'unlimited',
      users: 5,
      storage: '20 GB',
      support: 'priority',
    },
  },
  {
    tier: 'team_year',
    name: '‡∏ó‡∏µ‡∏°',
    price: 4990,
    billingCycle: 'yearly',
    savings: 17,
    features: [
      'üë• 5 ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡∏°',
      '‡∏™‡∏£‡πâ‡∏≤‡∏á BOQ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î',
      '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ + ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
      '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ/‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à',
      '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÅ‡∏•‡∏∞ QR Code',
      '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå',
      '‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏±‡∏Å ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢',
      '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡∏°',
      '‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡∏°',
      '‚ú® ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î 17% (‡∏ø998)',
      'üéÅ ‡∏£‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏Ñ‡∏£',
      '‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞',
    ],
    limits: {
      boqPerMonth: 'unlimited',
      users: 5,
      storage: '50 GB',
      support: 'dedicated',
    },
  },
];

export function MembershipPage({ onBack, user }: MembershipPageProps) {
  const [membership, setMembership] = useState<Membership | null>(null);
  const [loading, setLoading] = useState(true);
  const [isYearly, setIsYearly] = useState(true);
  const [selectedPlan, setSelectedPlan] = useState<MembershipPlan | null>(null);
  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);
  const [qrCodeFile, setQrCodeFile] = useState<File | null>(null);
  const [paymentMethod, setPaymentMethod] = useState<'promptpay' | 'credit_card' | 'bank_transfer'>('promptpay');

  useEffect(() => {
    loadMembership();
  }, [user]);

  const loadMembership = async () => {
    if (!user) return;

    try {
      setLoading(true);
      const response = await fetch(
        `https://${projectId}.supabase.co/functions/v1/make-server-6e95bca3/membership/${user.id}`,
        {
          headers: {
            Authorization: `Bearer ${publicAnonKey}`,
          },
        }
      );

      if (response.ok) {
        const data = await response.json();
        setMembership(data.membership);
      }
    } catch (error) {
      console.error('Failed to load membership:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ');
    } finally {
      setLoading(false);
    }
  };

  const handleSelectPlan = (plan: MembershipPlan) => {
    if (plan.tier === 'free') {
      toast.info('‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ü‡∏£‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }
    setSelectedPlan(plan);
    setIsPaymentDialogOpen(true);
  };

  const handlePayment = async () => {
    if (!user || !selectedPlan) return;

    try {
      // In production, integrate with payment gateway
      const paymentRecord: PaymentRecord = {
        id: `payment-${Date.now()}`,
        amount: selectedPlan.price,
        date: Date.now(),
        method: paymentMethod,
        status: 'completed',
        planName: selectedPlan.name,
        billingCycle: selectedPlan.billingCycle,
      };

      const subscriptionDuration = selectedPlan.billingCycle === 'yearly' ? 365 : 30;
      const subscriptionEnd = Date.now() + subscriptionDuration * 24 * 60 * 60 * 1000;

      const updatedMembership: Membership = {
        userId: user.id,
        tier: selectedPlan.tier,
        freeBoqUsed: true,
        subscriptionStart: Date.now(),
        subscriptionEnd,
        autoRenew: true,
        paymentHistory: [...(membership?.paymentHistory || []), paymentRecord],
        boqUsedThisMonth: 0,
      };

      const response = await fetch(
        `https://${projectId}.supabase.co/functions/v1/make-server-6e95bca3/membership`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${publicAnonKey}`,
          },
          body: JSON.stringify(updatedMembership),
        }
      );

      if (response.ok) {
        toast.success(`üéâ ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô ${selectedPlan.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
        setIsPaymentDialogOpen(false);
        setSelectedPlan(null);
        loadMembership();
      } else {
        throw new Error('Failed to upgrade');
      }
    } catch (error) {
      console.error('Payment failed:', error);
      toast.error('‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  };

  const getCurrentPlan = (): MembershipPlan => {
    return MEMBERSHIP_PLANS.find(p => p.tier === membership?.tier) || MEMBERSHIP_PLANS[0];
  };

  const getDisplayPlans = () => {
    // Always show free plan
    const freePlan = MEMBERSHIP_PLANS.find(p => p.tier === 'free');
    
    // Get individual plan based on billing cycle
    const individualPlan = MEMBERSHIP_PLANS.find(p => 
      p.tier === (isYearly ? 'individual_year' : 'individual_month')
    );
    
    // Get team plan based on billing cycle
    const teamPlan = MEMBERSHIP_PLANS.find(p => 
      p.tier === (isYearly ? 'team_year' : 'team_month')
    );
    
    return [freePlan, individualPlan, teamPlan].filter(Boolean) as MembershipPlan[];
  };

  const formatPrice = (price: number, billingCycle: BillingCycle | null) => {
    if (price === 0) return '‡∏ü‡∏£‡∏µ';
    if (billingCycle === 'yearly') {
      return `‡∏ø${price.toLocaleString()}/‡∏õ‡∏µ`;
    }
    return `‡∏ø${price.toLocaleString()}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`;
  };

  const getDaysRemaining = () => {
    if (!membership?.subscriptionEnd) return 0;
    const now = Date.now();
    const daysRemaining = Math.ceil((membership.subscriptionEnd - now) / (1000 * 60 * 60 * 24));
    return Math.max(0, daysRemaining);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50 flex items-center justify-center">
        <div className="text-center">
          <Crown className="w-16 h-16 text-purple-500 mx-auto mb-4 animate-pulse" />
          <p className="text-muted-foreground">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
        </div>
      </div>
    );
  }

  const currentPlan = getCurrentPlan();
  const daysRemaining = getDaysRemaining();

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="icon" onClick={onBack}>
              <ArrowLeft className="w-5 h-5" />
            </Button>
            <div>
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
                  <Crown className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-3xl">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å VIP</h1>
                  <p className="text-muted-foreground">
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Current Plan Status */}
        {membership && membership.tier !== 'free' && (
          <motion.div 
            initial={{ opacity: 0, y: 20 }} 
            animate={{ opacity: 1, y: 0 }}
            className="mb-8"
          >
            <Card className="p-6 bg-gradient-to-r from-purple-500 to-pink-500 text-white">
              <div className="flex items-center justify-between flex-wrap gap-4">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-xl bg-white/20 backdrop-blur-sm flex items-center justify-center">
                    <Star className="w-8 h-8" />
                  </div>
                  <div>
                    <p className="text-sm opacity-90">‡πÅ‡∏ú‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
                    <h2 className="text-2xl mb-1">{currentPlan.name}</h2>
                    <div className="flex items-center gap-4 text-sm">
                      <span className="flex items-center gap-1">
                        <Calendar className="w-4 h-4" />
                        ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å {daysRemaining} ‡∏ß‡∏±‡∏ô
                      </span>
                      <span className="flex items-center gap-1">
                        <Users className="w-4 h-4" />
                        {currentPlan.limits.users} ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
                      </span>
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-3xl">{formatPrice(currentPlan.price, currentPlan.billingCycle)}</p>
                  <p className="text-sm opacity-90">
                    ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {membership.autoRenew ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'}
                  </p>
                </div>
              </div>
            </Card>
          </motion.div>
        )}

        {/* Special Offer Badge */}
        <div className="flex justify-center mb-6">
          <Badge className="bg-gradient-to-r from-orange-500 to-red-500 text-white px-6 py-2 text-base">
            üî• ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏õ‡∏µ‡πÅ‡∏£‡∏Å! ‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 35%
          </Badge>
        </div>

        {/* Billing Toggle */}
        <div className="flex justify-center mb-8">
          <Card className="p-2 inline-flex items-center gap-4">
            <span className={`text-sm ${!isYearly ? 'font-semibold' : 'text-muted-foreground'}`}>
              ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            </span>
            <Switch
              checked={isYearly}
              onCheckedChange={setIsYearly}
            />
            <span className={`text-sm ${isYearly ? 'font-semibold' : 'text-muted-foreground'}`}>
              ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ
              <Badge variant="secondary" className="ml-2 bg-green-100 text-green-700">
                ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î 17%
              </Badge>
            </span>
          </Card>
        </div>

        {/* Pricing Cards - 3 Columns */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
          {getDisplayPlans().map((plan, index) => {
            const isTeamPlan = plan.tier.startsWith('team');
            const isFreePlan = plan.tier === 'free';
            
            return (
              <motion.div
                key={plan.tier}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className={isTeamPlan ? 'md:transform md:scale-105' : ''}
              >
                <Card className={`p-6 relative h-full flex flex-col ${
                  isTeamPlan
                    ? 'bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white border-2 border-purple-400 shadow-2xl'
                    : plan.popular 
                      ? 'border-2 border-purple-500 shadow-xl' 
                      : 'border'
                }`}>
                  {/* Background Pattern for Team Plan */}
                  {isTeamPlan && (
                    <div className="absolute inset-0 opacity-10 rounded-lg overflow-hidden">
                      <div className="absolute inset-0" style={{
                        backgroundImage: 'radial-gradient(circle, white 1px, transparent 1px)',
                        backgroundSize: '20px 20px'
                      }} />
                    </div>
                  )}

                  {/* Popular Badge */}
                  {plan.popular && !isTeamPlan && (
                    <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                      <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-1">
                        ‚≠ê ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                      </Badge>
                    </div>
                  )}

                  {/* Team Badge */}
                  {isTeamPlan && (
                    <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                      <Badge className="bg-gradient-to-r from-yellow-400 to-orange-500 text-slate-900 px-4 py-1">
                        üë• ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏°
                      </Badge>
                    </div>
                  )}

                  <div className="relative z-10 flex-1 flex flex-col">
                    {/* Header */}
                    <div className="mb-6">
                      <div className="flex items-center justify-between mb-3">
                        <h3 className={`text-2xl ${isTeamPlan ? 'text-white' : ''}`}>
                          {plan.name}
                        </h3>
                        {plan.limits.users > 1 && (
                          <Badge variant="outline" className={`gap-1 ${
                            isTeamPlan ? 'border-white/30 text-white bg-white/10' : ''
                          }`}>
                            <Users className="w-3 h-3" />
                            {plan.limits.users}
                          </Badge>
                        )}
                      </div>
                      
                      <div className="flex items-baseline gap-1">
                        {isFreePlan ? (
                          <span className="text-4xl">‡∏ü‡∏£‡∏µ</span>
                        ) : (
                          <>
                            <span className="text-4xl">‡∏ø{plan.price.toLocaleString()}</span>
                            <span className={isTeamPlan ? 'text-white/70' : 'text-muted-foreground'}>
                              /{plan.billingCycle === 'yearly' ? '‡∏õ‡∏µ' : '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'}
                            </span>
                          </>
                        )}
                      </div>

                      {plan.savings && (
                        <p className={`text-sm mt-1 ${
                          isTeamPlan ? 'text-green-300' : 'text-green-600'
                        }`}>
                          üí∞ ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î {plan.savings}% (
                          {plan.tier === 'individual_year' && '‡∏ø258'}
                          {plan.tier === 'team_year' && '‡∏ø998'})
                        </p>
                      )}
                    </div>

                    {/* Features */}
                    <div className="space-y-3 mb-6 flex-1">
                      {plan.features.map((feature, i) => (
                        <div key={i} className="flex items-start gap-2">
                          <Check className={`w-5 h-5 flex-shrink-0 mt-0.5 ${
                            isTeamPlan ? 'text-green-400' : 'text-green-500'
                          }`} />
                          <span className={`text-sm ${isTeamPlan ? 'text-white/90' : ''}`}>
                            {feature}
                          </span>
                        </div>
                      ))}
                    </div>

                    {/* Limits */}
                    <div className={`space-y-2 mb-6 p-3 rounded-lg ${
                      isTeamPlan ? 'bg-white/10 backdrop-blur-sm' : 'bg-gray-50'
                    }`}>
                      <div className="flex justify-between text-sm">
                        <span className={isTeamPlan ? 'text-white/70' : 'text-muted-foreground'}>
                          BOQ ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:
                        </span>
                        <span className={isTeamPlan ? 'text-white font-semibold' : 'font-semibold'}>
                          {plan.limits.boqPerMonth === 'unlimited' ? (
                            <span className="flex items-center gap-1">
                              <Infinity className="w-4 h-4" /> ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î
                            </span>
                          ) : (
                            plan.limits.boqPerMonth
                          )}
                        </span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className={isTeamPlan ? 'text-white/70' : 'text-muted-foreground'}>
                          ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
                        </span>
                        <span className={isTeamPlan ? 'text-white font-semibold' : 'font-semibold'}>
                          {plan.limits.storage}
                        </span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className={isTeamPlan ? 'text-white/70' : 'text-muted-foreground'}>
                          ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô:
                        </span>
                        <span className={isTeamPlan ? 'text-white font-semibold' : 'font-semibold'}>
                          {plan.limits.support === 'email' && 'üìß Email'}
                          {plan.limits.support === 'priority' && '‚ö° ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç'}
                          {plan.limits.support === 'dedicated' && 'üëë ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì'}
                        </span>
                      </div>
                    </div>

                    {/* CTA Button */}
                    <Button
                      onClick={() => handleSelectPlan(plan)}
                      className={`w-full ${
                        isTeamPlan
                          ? 'bg-gradient-to-r from-yellow-400 to-orange-500 text-slate-900 hover:from-yellow-500 hover:to-orange-600'
                          : plan.popular
                            ? 'bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600'
                            : ''
                      }`}
                      size="lg"
                      disabled={membership?.tier === plan.tier}
                    >
                      {membership?.tier === plan.tier ? (
                        '‚úì ‡πÅ‡∏ú‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'
                      ) : (
                        <>
                          {isFreePlan ? (
                            <>‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏£‡∏µ</>
                          ) : (
                            <>
                              <Zap className="w-4 h-4 mr-2" />
                              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏ô‡∏µ‡πâ
                            </>
                          )}
                        </>
                      )}
                    </Button>
                  </div>
                </Card>
              </motion.div>
            );
          })}
        </div>

        {/* FAQ Section */}
        <Card className="p-8 mb-8">
          <h2 className="text-2xl mb-6 flex items-center gap-2">
            <HelpCircle className="w-6 h-6 text-purple-500" />
            ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
          </h2>
          
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h3 className="font-semibold mb-2">üî• ‡∏ó‡∏≥‡πÑ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏°‡∏≤‡∏Å?</h3>
              <p className="text-sm text-muted-foreground">
                ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠<strong> ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏õ‡∏µ‡πÅ‡∏£‡∏Å</strong> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö BOQ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô 
                ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏à‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
              </p>
            </div>

            <div>
              <h3 className="font-semibold mb-2">üì¶ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡∏°‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?</h3>
              <p className="text-sm text-muted-foreground">
                ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ó‡∏µ‡∏°‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏Ñ‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
              </p>
            </div>

            <div>
              <h3 className="font-semibold mb-2">üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?</h3>
              <p className="text-sm text-muted-foreground">
                ‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡πà‡∏≤‡∏ô PromptPay QR Code, ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
              </p>
            </div>

            <div>
              <h3 className="font-semibold mb-2">üîÑ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?</h3>
              <p className="text-sm text-muted-foreground">
                ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </p>
            </div>

            <div>
              <h3 className="font-semibold mb-2">‚¨ÜÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ú‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?</h3>
              <p className="text-sm text-muted-foreground">
                ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏ú‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
              </p>
            </div>

            <div>
              <h3 className="font-semibold mb-2">üíæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÑ‡∏´‡∏°?</h3>
              <p className="text-sm text-muted-foreground">
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏ô Supabase (Postgres) ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏î‡πâ‡∏ß‡∏¢ SSL/TLS
              </p>
            </div>
          </div>
        </Card>

        {/* Payment History */}
        {membership && membership.paymentHistory && membership.paymentHistory.length > 0 && (
          <Card className="p-6">
            <h2 className="text-xl mb-4 flex items-center gap-2">
              <Clock className="w-5 h-5 text-purple-500" />
              ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            </h2>
            
            <div className="space-y-3">
              {membership.paymentHistory.slice(0, 5).map((payment) => (
                <div key={payment.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div>
                    <p className="font-semibold">{payment.planName || 'VIP Membership'}</p>
                    <p className="text-sm text-muted-foreground">
                      {new Date(payment.date).toLocaleDateString('th-TH', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                      })}
                    </p>
                  </div>
                  <div className="text-right">
                    <p className="text-lg">‡∏ø{payment.amount.toLocaleString()}</p>
                    <Badge variant={payment.status === 'completed' ? 'default' : 'secondary'}>
                      {payment.status === 'completed' ? '‚úì ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : payment.status}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </Card>
        )}
      </div>

      {/* Payment Dialog */}
      <Dialog open={isPaymentDialogOpen} onOpenChange={setIsPaymentDialogOpen}>
        <DialogContent className="max-w-lg">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <CreditCard className="w-5 h-5" />
              ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô - {selectedPlan?.name}
            </DialogTitle>
            <DialogDescription>
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-6 py-4">
            {/* Price Summary */}
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-4 rounded-lg border border-purple-200">
              <div className="flex justify-between items-center mb-2">
                <span className="text-sm text-muted-foreground">‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</span>
                <span className="font-semibold">{selectedPlan?.name}</span>
              </div>
              <div className="flex justify-between items-center mb-2">
                <span className="text-sm text-muted-foreground">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:</span>
                <span className="font-semibold">
                  {selectedPlan?.billingCycle === 'yearly' ? '1 ‡∏õ‡∏µ' : '1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'}
                </span>
              </div>
              {selectedPlan?.savings && (
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm text-green-600">‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î:</span>
                  <span className="font-semibold text-green-600">
                    -{selectedPlan.savings}%
                  </span>
                </div>
              )}
              <div className="border-t border-purple-200 mt-3 pt-3 flex justify-between items-center">
                <span className="font-semibold">‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                <span className="text-2xl text-purple-600">
                  ‡∏ø{selectedPlan?.price.toLocaleString()}
                </span>
              </div>
            </div>

            {/* Payment Method Selection */}
            <div className="space-y-3">
              <Label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</Label>
              
              <div className="grid gap-3">
                <button
                  onClick={() => setPaymentMethod('promptpay')}
                  className={`p-4 border-2 rounded-lg flex items-center gap-3 transition-all ${
                    paymentMethod === 'promptpay'
                      ? 'border-purple-500 bg-purple-50'
                      : 'border-gray-200 hover:border-purple-300'
                  }`}
                >
                  <QrCode className="w-6 h-6 text-purple-500" />
                  <div className="text-left flex-1">
                    <p className="font-semibold">PromptPay QR Code</p>
                    <p className="text-xs text-muted-foreground">
                      ‡∏™‡πÅ‡∏Å‡∏ô QR ‡∏à‡πà‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
                    </p>
                  </div>
                  {paymentMethod === 'promptpay' && (
                    <Check className="w-5 h-5 text-purple-500" />
                  )}
                </button>

                <button
                  onClick={() => setPaymentMethod('credit_card')}
                  className={`p-4 border-2 rounded-lg flex items-center gap-3 transition-all ${
                    paymentMethod === 'credit_card'
                      ? 'border-purple-500 bg-purple-50'
                      : 'border-gray-200 hover:border-purple-300'
                  }`}
                >
                  <CreditCard className="w-6 h-6 text-purple-500" />
                  <div className="text-left flex-1">
                    <p className="font-semibold">‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï</p>
                    <p className="text-xs text-muted-foreground">
                      Visa, MasterCard, JCB
                    </p>
                  </div>
                  {paymentMethod === 'credit_card' && (
                    <Check className="w-5 h-5 text-purple-500" />
                  )}
                </button>

                <button
                  onClick={() => setPaymentMethod('bank_transfer')}
                  className={`p-4 border-2 rounded-lg flex items-center gap-3 transition-all ${
                    paymentMethod === 'bank_transfer'
                      ? 'border-purple-500 bg-purple-50'
                      : 'border-gray-200 hover:border-purple-300'
                  }`}
                >
                  <TrendingUp className="w-6 h-6 text-purple-500" />
                  <div className="text-left flex-1">
                    <p className="font-semibold">‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</p>
                    <p className="text-xs text-muted-foreground">
                      ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ
                    </p>
                  </div>
                  {paymentMethod === 'bank_transfer' && (
                    <Check className="w-5 h-5 text-purple-500" />
                  )}
                </button>
              </div>
            </div>

            {/* Demo Notice */}
            <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
              <p className="text-sm text-blue-700">
                üí° <strong>‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</strong> ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                ‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Payment Gateway
              </p>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsPaymentDialogOpen(false)}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button 
              onClick={handlePayment}
              className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600"
            >
              <Sparkles className="w-4 h-4 mr-2" />
              ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏ø{selectedPlan?.price.toLocaleString()}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
