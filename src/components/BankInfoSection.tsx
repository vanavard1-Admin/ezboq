/**
 * BankInfoSection Component
 * PRODUCTION-READY (no figma:asset; static SVG only)
 * 
 * ‚úÖ Security: No figma:asset imports
 * ‚úÖ Performance: Static SVG assets with proper dimensions
 * ‚úÖ CLS Prevention: width/height set in BankLogo component
 */

import React, { useState, useCallback } from "react";
import { cn } from "./ui/utils";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { BankLogo, type ThaiBank, BANK_NAMES } from "./BankLogo";
import { Upload, X, QrCode, Loader2 } from "lucide-react";
import { compressImage, getCompressionOptions } from "../utils/imageCompression";
import { toast } from "sonner@2.0.3";
import { analyzePayloadSize } from "../utils/saveOptimizer";

export type BankCode = ThaiBank;

const BANKS: { code: BankCode; name: string }[] = [
  { code: "bbl", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û (BBL)" },
  { code: "kbank", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢ (KBANK)" },
  { code: "scb", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå (SCB)" },
  { code: "ktb", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢ (KTB)" },
  { code: "bay", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤ (BAY)" },
  { code: "ttb", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï (TTB)" },
  { code: "gsb", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô (GSB)" },
  { code: "ghb", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (GHB)" },
  { code: "kkp", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ô‡∏≤‡∏Ñ‡∏¥‡∏ô‡∏†‡∏±‡∏ó‡∏£ (KKP)" },
  { code: "cimb", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ã‡∏µ‡πÑ‡∏≠‡πÄ‡∏≠‡πá‡∏°‡∏ö‡∏µ‡πÑ‡∏ó‡∏¢ (CIMB)" },
  { code: "uob", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏¢‡∏π‡πÇ‡∏≠‡∏ö‡∏µ (UOB)" },
  { code: "tisco", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏¥‡∏™‡πÇ‡∏Å‡πâ (TISCO)" },
  { code: "lhbank", name: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏ô‡∏î‡πå ‡πÅ‡∏≠‡∏ô‡∏î‡πå ‡πÄ‡∏Æ‡πâ‡∏≤‡∏™‡πå (LH Bank)" },
];

export type BankAccount = {
  bankCode: BankCode | "";
  accountName: string;
  accountNumber: string;
  branch?: string;
  qrCodeUrl?: string;
};

interface BankInfoSectionProps {
  value: BankAccount;
  onChange: (next: BankAccount) => void;
  onSave?: () => void;
  disabled?: boolean;
  className?: string;
}

export function BankInfoSection(props: BankInfoSectionProps) {
  const { value, onChange, onSave, disabled, className } = props;
  const [isUploadingQR, setIsUploadingQR] = useState(false);

  // üîí Safety: Ensure value is never undefined
  const safeValue = value || {
    bankCode: "",
    accountName: "",
    accountNumber: "",
    branch: "",
    qrCodeUrl: ""
  };

  // üñºÔ∏è QR Code Upload Handler with Performance Monitoring
  const handleQRCodeUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith('image/')) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }

    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      toast.error('‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB');
      return;
    }

    setIsUploadingQR(true);
    const startTime = performance.now();

    try {
      // Compress image with optimized settings for QR Code
      const compressionOptions = getCompressionOptions('qrCode');
      const base64 = await compressImage(file, compressionOptions);

      // Analyze payload size
      const sizeBytes = analyzePayloadSize({ qrCodeUrl: base64 }, 'QR Code');
      const sizeKB = Math.round(sizeBytes / 1024);

      // Performance monitoring
      const duration = performance.now() - startTime;
      console.log(`‚ö° QR Code upload: ${duration.toFixed(0)}ms (${sizeKB}KB)`);

      // Warn if QR code is still large
      if (sizeKB > 200) {
        console.warn(`‚ö†Ô∏è QR Code is ${sizeKB}KB (recommended < 150KB)`);
        toast.warning(`QR Code ‡∏Ç‡∏ô‡∏≤‡∏î ${sizeKB}KB`, {
          description: '‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡πâ‡∏≤‡∏•‡∏á ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤',
          duration: 5000
        });
      } else if (sizeKB > 150) {
        console.warn(`‚ö†Ô∏è QR Code is ${sizeKB}KB (recommended < 150KB)`);
      }

      // Update value with QR code
      onChange({ ...safeValue, qrCodeUrl: base64 });
      
      toast.success(`‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${sizeKB}KB)`, {
        description: duration > 1000 ? '‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•' : '‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      });
    } catch (error) {
      console.error('QR Code upload error:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î QR Code');
    } finally {
      setIsUploadingQR(false);
      // Reset input for re-upload
      event.target.value = '';
    }
  }, [safeValue, onChange]);

  const handleRemoveQRCode = () => {
    onChange({ ...safeValue, qrCodeUrl: undefined });
    toast.success('‡∏•‡∏ö QR Code ‡πÅ‡∏•‡πâ‡∏ß');
  };

  return (
    <section className={cn("space-y-4", className)}>
      {/* Bank Selection Grid */}
      <div>
        <Label className="mb-3 block">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</Label>
        <div className="grid grid-cols-2 gap-3 sm:grid-cols-3 lg:grid-cols-4">
          {BANKS.map((bank) => {
            const isActive = safeValue.bankCode === bank.code;
            return (
              <button
                key={bank.code}
                type="button"
                onClick={() => onChange({ ...safeValue, bankCode: bank.code })}
                disabled={disabled}
                className={cn(
                  "flex flex-col items-center justify-center gap-2 rounded-xl border-2 p-4 transition-all",
                  "hover:shadow-md focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
                  isActive
                    ? "border-primary bg-primary/5 shadow-sm"
                    : "border-border hover:bg-muted",
                  disabled && "cursor-not-allowed opacity-50"
                )}
                aria-pressed={isActive}
              >
                <BankLogo bank={bank.code} priority={isActive} />
                <span className={cn(
                  "text-xs text-center",
                  isActive ? "font-medium text-primary" : "text-muted-foreground"
                )}>
                  {bank.name}
                </span>
              </button>
            );
          })}
        </div>
      </div>

      {/* Bank Account Details */}
      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
        <div className="space-y-2">
          <Label htmlFor="account-name">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</Label>
          <Input
            id="account-name"
            value={safeValue.accountName}
            onChange={(e) => onChange({ ...safeValue, accountName: e.target.value })}
            placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"
            disabled={disabled}
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="account-number">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</Label>
          <Input
            id="account-number"
            value={safeValue.accountNumber}
            onChange={(e) => onChange({ ...safeValue, accountNumber: e.target.value })}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô 123-4-56789-0"
            inputMode="numeric"
            disabled={disabled}
          />
        </div>
        <div className="space-y-2 sm:col-span-2">
          <Label htmlFor="branch">‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</Label>
          <Input
            id="branch"
            value={safeValue.branch ?? ""}
            onChange={(e) => onChange({ ...safeValue, branch: e.target.value })}
            placeholder="‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
            disabled={disabled}
          />
        </div>
      </div>

      {/* QR Code Upload Section */}
      <div className="space-y-3 pt-2 border-t">
        <Label className="flex items-center gap-2">
          <QrCode className="h-4 w-4 text-green-600" />
          QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
        </Label>
        <div className="space-y-1">
          <p className="text-xs text-muted-foreground">
            ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÉ‡∏ö‡∏ß‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πÅ‡∏Å‡∏ô‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          </p>
          <p className="text-xs text-amber-600">
            ‚ö° Tips: ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1MB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </p>
        </div>
        
        {safeValue.qrCodeUrl ? (
          <div className="flex items-start gap-3 p-3 bg-green-50 border border-green-200 rounded-lg">
            <img
              src={safeValue.qrCodeUrl}
              alt="QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå"
              className="w-24 h-24 object-contain bg-white p-1 rounded border"
              data-pdf-keep="true"
            />
            <div className="flex-1 min-w-0">
              <p className="text-sm font-medium text-green-900">QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå</p>
              <p className="text-xs text-green-700 mt-1">‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß - ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF</p>
              <p className="text-xs text-muted-foreground mt-1">
                ‡∏Ç‡∏ô‡∏≤‡∏î: ~{Math.round(safeValue.qrCodeUrl.length * 0.75 / 1024)}KB
                {(safeValue.qrCodeUrl.length * 0.75 / 1024) > 150 && ' (‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà)'}
              </p>
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={handleRemoveQRCode}
                disabled={disabled}
                className="mt-2 h-7 text-xs text-red-600 hover:text-red-700 hover:bg-red-50"
              >
                <X className="h-3 w-3 mr-1" />
                ‡∏•‡∏ö QR Code
              </Button>
            </div>
          </div>
        ) : (
          <div className="flex items-center gap-2">
            <Input
              id="qr-code-upload"
              type="file"
              accept="image/*"
              onChange={handleQRCodeUpload}
              disabled={disabled || isUploadingQR}
              className="hidden"
            />
            <Label
              htmlFor="qr-code-upload"
              className={cn(
                "flex items-center gap-2 px-4 py-2 border-2 border-dashed rounded-lg cursor-pointer transition-colors",
                "hover:bg-green-50 hover:border-green-300",
                (disabled || isUploadingQR) && "opacity-50 cursor-not-allowed pointer-events-none"
              )}
            >
              {isUploadingQR ? (
                <>
                  <Loader2 className="h-4 w-4 text-green-600 animate-spin" />
                  <span className="text-sm">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• QR Code...</span>
                </>
              ) : (
                <>
                  <Upload className="h-4 w-4 text-green-600" />
                  <span className="text-sm">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå QR Code</span>
                </>
              )}
            </Label>
            {isUploadingQR && (
              <p className="text-xs text-muted-foreground">
                ‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...
              </p>
            )}
          </div>
        )}
      </div>

      {/* Save Button */}
      {onSave && (
        <div className="flex items-center justify-end gap-2">
          <Button
            onClick={onSave}
            disabled={disabled || !safeValue.bankCode || !safeValue.accountName || !safeValue.accountNumber}
          >
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
          </Button>
        </div>
      )}
    </section>
  );
}

export default BankInfoSection;
