{"version":3,"file":"integration.js","sources":["../../../../src/profiling/integration.ts"],"sourcesContent":["import type { EventEnvelope, IntegrationFn, Profile, Span } from '@sentry/core';\nimport { debug, defineIntegration, getActiveSpan, getRootSpan, hasSpansEnabled } from '@sentry/core';\nimport type { BrowserOptions } from '../client';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { WINDOW } from '../helpers';\nimport { BrowserTraceLifecycleProfiler } from './lifecycleMode/traceLifecycleProfiler';\nimport { startProfileForSpan } from './startProfileForSpan';\nimport type { ProfiledEvent } from './utils';\nimport {\n  addProfilesToEnvelope,\n  attachProfiledThreadToEvent,\n  createProfilingEvent,\n  findProfiledTransactionsFromEnvelope,\n  getActiveProfilesCount,\n  hasLegacyProfiling,\n  isAutomatedPageLoadSpan,\n  shouldProfileSession,\n  shouldProfileSpanLegacy,\n  takeProfileFromGlobalCache,\n} from './utils';\n\nconst INTEGRATION_NAME = 'BrowserProfiling';\n\nconst _browserProfilingIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const options = client.getOptions() as BrowserOptions;\n\n      if (!hasLegacyProfiling(options) && !options.profileLifecycle) {\n        // Set default lifecycle mode\n        options.profileLifecycle = 'manual';\n      }\n\n      if (hasLegacyProfiling(options) && !options.profilesSampleRate) {\n        DEBUG_BUILD && debug.log('[Profiling] Profiling disabled, no profiling options found.');\n        return;\n      }\n\n      const activeSpan = getActiveSpan();\n      const rootSpan = activeSpan && getRootSpan(activeSpan);\n\n      if (hasLegacyProfiling(options) && options.profileSessionSampleRate !== undefined) {\n        DEBUG_BUILD &&\n          debug.warn(\n            '[Profiling] Both legacy profiling (`profilesSampleRate`) and UI profiling settings are defined. `profileSessionSampleRate` has no effect when legacy profiling is enabled.',\n          );\n      }\n\n      // UI PROFILING (Profiling V2)\n      if (!hasLegacyProfiling(options)) {\n        const sessionSampled = shouldProfileSession(options);\n        if (!sessionSampled) {\n          DEBUG_BUILD && debug.log('[Profiling] Session not sampled. Skipping lifecycle profiler initialization.');\n        }\n\n        const lifecycleMode = options.profileLifecycle;\n\n        if (lifecycleMode === 'trace') {\n          if (!hasSpansEnabled(options)) {\n            DEBUG_BUILD &&\n              debug.warn(\n                \"[Profiling] `profileLifecycle` is 'trace' but tracing is disabled. Set a `tracesSampleRate` or `tracesSampler` to enable span tracing.\",\n              );\n            return;\n          }\n\n          const traceLifecycleProfiler = new BrowserTraceLifecycleProfiler();\n          traceLifecycleProfiler.initialize(client, sessionSampled);\n\n          // If there is an active, sampled root span already, notify the profiler\n          if (rootSpan) {\n            traceLifecycleProfiler.notifyRootSpanActive(rootSpan);\n          }\n\n          // In case rootSpan is created slightly after setup -> schedule microtask to re-check and notify.\n          WINDOW.setTimeout(() => {\n            const laterActiveSpan = getActiveSpan();\n            const laterRootSpan = laterActiveSpan && getRootSpan(laterActiveSpan);\n            if (laterRootSpan) {\n              traceLifecycleProfiler.notifyRootSpanActive(laterRootSpan);\n            }\n          }, 0);\n        }\n      } else {\n        // LEGACY PROFILING (v1)\n        if (rootSpan && isAutomatedPageLoadSpan(rootSpan)) {\n          if (shouldProfileSpanLegacy(rootSpan)) {\n            startProfileForSpan(rootSpan);\n          }\n        }\n\n        client.on('spanStart', (span: Span) => {\n          if (span === getRootSpan(span) && shouldProfileSpanLegacy(span)) {\n            startProfileForSpan(span);\n          }\n        });\n\n        client.on('beforeEnvelope', (envelope): void => {\n          // if not profiles are in queue, there is nothing to add to the envelope.\n          if (!getActiveProfilesCount()) {\n            return;\n          }\n\n          const profiledTransactionEvents = findProfiledTransactionsFromEnvelope(envelope);\n          if (!profiledTransactionEvents.length) {\n            return;\n          }\n\n          const profilesToAddToEnvelope: Profile[] = [];\n\n          for (const profiledTransaction of profiledTransactionEvents) {\n            const context = profiledTransaction?.contexts;\n            const profile_id = context?.profile?.['profile_id'];\n            const start_timestamp = context?.profile?.['start_timestamp'];\n\n            if (typeof profile_id !== 'string') {\n              DEBUG_BUILD && debug.log('[Profiling] cannot find profile for a span without a profile context');\n              continue;\n            }\n\n            if (!profile_id) {\n              DEBUG_BUILD && debug.log('[Profiling] cannot find profile for a span without a profile context');\n              continue;\n            }\n\n            // Remove the profile from the span context before sending, relay will take care of the rest.\n            if (context?.profile) {\n              delete context.profile;\n            }\n\n            const profile = takeProfileFromGlobalCache(profile_id);\n            if (!profile) {\n              DEBUG_BUILD && debug.log(`[Profiling] Could not retrieve profile for span: ${profile_id}`);\n              continue;\n            }\n\n            const profileEvent = createProfilingEvent(\n              profile_id,\n              start_timestamp as number | undefined,\n              profile,\n              profiledTransaction as ProfiledEvent,\n            );\n            if (profileEvent) {\n              profilesToAddToEnvelope.push(profileEvent);\n            }\n          }\n\n          addProfilesToEnvelope(envelope as EventEnvelope, profilesToAddToEnvelope);\n        });\n      }\n    },\n    processEvent(event) {\n      return attachProfiledThreadToEvent(event);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const browserProfilingIntegration = defineIntegration(_browserProfilingIntegration);\n"],"names":["hasLegacyProfiling","DEBUG_BUILD","debug","getActiveSpan","getRootSpan","shouldProfileSession","hasSpansEnabled","traceLifecycleProfiler","BrowserTraceLifecycleProfiler","WINDOW","isAutomatedPageLoadSpan","shouldProfileSpanLegacy","startProfileForSpan","getActiveProfilesCount","findProfiledTransactionsFromEnvelope","takeProfileFromGlobalCache","createProfilingEvent","addProfilesToEnvelope","attachProfiledThreadToEvent","defineIntegration"],"mappings":";;;;;;;;;AAqBA,MAAM,gBAAA,GAAmB,kBAAkB;;AAE3C,MAAM,4BAAA,IAAgC,MAAM;AAC5C,EAAE,OAAO;AACT,IAAI,IAAI,EAAE,gBAAgB;AAC1B,IAAI,KAAK,CAAC,MAAM,EAAE;AAClB,MAAM,MAAM,OAAA,GAAU,MAAM,CAAC,UAAU,EAAC;;AAExC,MAAM,IAAI,CAACA,wBAAkB,CAAC,OAAO,CAAA,IAAK,CAAC,OAAO,CAAC,gBAAgB,EAAE;AACrE;AACA,QAAQ,OAAO,CAAC,gBAAA,GAAmB,QAAQ;AAC3C;;AAEA,MAAM,IAAIA,wBAAkB,CAAC,OAAO,CAAA,IAAK,CAAC,OAAO,CAAC,kBAAkB,EAAE;AACtE,QAAQC,0BAAeC,UAAK,CAAC,GAAG,CAAC,6DAA6D,CAAC;AAC/F,QAAQ;AACR;;AAEA,MAAM,MAAM,UAAA,GAAaC,kBAAa,EAAE;AACxC,MAAM,MAAM,WAAW,UAAA,IAAcC,gBAAW,CAAC,UAAU,CAAC;;AAE5D,MAAM,IAAIJ,wBAAkB,CAAC,OAAO,CAAA,IAAK,OAAO,CAAC,wBAAA,KAA6B,SAAS,EAAE;AACzF,QAAQC,sBAAA;AACR,UAAUC,UAAK,CAAC,IAAI;AACpB,YAAY,4KAA4K;AACxL,WAAW;AACX;;AAEA;AACA,MAAM,IAAI,CAACF,wBAAkB,CAAC,OAAO,CAAC,EAAE;AACxC,QAAQ,MAAM,cAAA,GAAiBK,0BAAoB,CAAC,OAAO,CAAC;AAC5D,QAAQ,IAAI,CAAC,cAAc,EAAE;AAC7B,UAAUJ,0BAAeC,UAAK,CAAC,GAAG,CAAC,8EAA8E,CAAC;AAClH;;AAEA,QAAQ,MAAM,aAAA,GAAgB,OAAO,CAAC,gBAAgB;;AAEtD,QAAQ,IAAI,aAAA,KAAkB,OAAO,EAAE;AACvC,UAAU,IAAI,CAACI,oBAAe,CAAC,OAAO,CAAC,EAAE;AACzC,YAAYL,sBAAA;AACZ,cAAcC,UAAK,CAAC,IAAI;AACxB,gBAAgB,wIAAwI;AACxJ,eAAe;AACf,YAAY;AACZ;;AAEA,UAAU,MAAMK,wBAAA,GAAyB,IAAIC,oDAA6B,EAAE;AAC5E,UAAUD,wBAAsB,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC;;AAEnE;AACA,UAAU,IAAI,QAAQ,EAAE;AACxB,YAAYA,wBAAsB,CAAC,oBAAoB,CAAC,QAAQ,CAAC;AACjE;;AAEA;AACA,UAAUE,cAAM,CAAC,UAAU,CAAC,MAAM;AAClC,YAAY,MAAM,eAAA,GAAkBN,kBAAa,EAAE;AACnD,YAAY,MAAM,gBAAgB,eAAA,IAAmBC,gBAAW,CAAC,eAAe,CAAC;AACjF,YAAY,IAAI,aAAa,EAAE;AAC/B,cAAcG,wBAAsB,CAAC,oBAAoB,CAAC,aAAa,CAAC;AACxE;AACA,WAAW,EAAE,CAAC,CAAC;AACf;AACA,aAAa;AACb;AACA,QAAQ,IAAI,QAAA,IAAYG,6BAAuB,CAAC,QAAQ,CAAC,EAAE;AAC3D,UAAU,IAAIC,6BAAuB,CAAC,QAAQ,CAAC,EAAE;AACjD,YAAYC,uCAAmB,CAAC,QAAQ,CAAC;AACzC;AACA;;AAEA,QAAQ,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,IAAI,KAAW;AAC/C,UAAU,IAAI,IAAA,KAASR,gBAAW,CAAC,IAAI,CAAA,IAAKO,6BAAuB,CAAC,IAAI,CAAC,EAAE;AAC3E,YAAYC,uCAAmB,CAAC,IAAI,CAAC;AACrC;AACA,SAAS,CAAC;;AAEV,QAAQ,MAAM,CAAC,EAAE,CAAC,gBAAgB,EAAE,CAAC,QAAQ,KAAW;AACxD;AACA,UAAU,IAAI,CAACC,4BAAsB,EAAE,EAAE;AACzC,YAAY;AACZ;;AAEA,UAAU,MAAM,yBAAA,GAA4BC,0CAAoC,CAAC,QAAQ,CAAC;AAC1F,UAAU,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE;AACjD,YAAY;AACZ;;AAEA,UAAU,MAAM,uBAAuB,GAAc,EAAE;;AAEvD,UAAU,KAAK,MAAM,mBAAA,IAAuB,yBAAyB,EAAE;AACvE,YAAY,MAAM,OAAA,GAAU,mBAAmB,EAAE,QAAQ;AACzD,YAAY,MAAM,aAAa,OAAO,EAAE,OAAO,GAAG,YAAY,CAAC;AAC/D,YAAY,MAAM,kBAAkB,OAAO,EAAE,OAAO,GAAG,iBAAiB,CAAC;;AAEzE,YAAY,IAAI,OAAO,UAAA,KAAe,QAAQ,EAAE;AAChD,cAAcb,0BAAeC,UAAK,CAAC,GAAG,CAAC,sEAAsE,CAAC;AAC9G,cAAc;AACd;;AAEA,YAAY,IAAI,CAAC,UAAU,EAAE;AAC7B,cAAcD,0BAAeC,UAAK,CAAC,GAAG,CAAC,sEAAsE,CAAC;AAC9G,cAAc;AACd;;AAEA;AACA,YAAY,IAAI,OAAO,EAAE,OAAO,EAAE;AAClC,cAAc,OAAO,OAAO,CAAC,OAAO;AACpC;;AAEA,YAAY,MAAM,OAAA,GAAUa,gCAA0B,CAAC,UAAU,CAAC;AAClE,YAAY,IAAI,CAAC,OAAO,EAAE;AAC1B,cAAcd,sBAAA,IAAeC,UAAK,CAAC,GAAG,CAAC,CAAC,iDAAiD,EAAE,UAAU,CAAC,CAAA,CAAA;AACA,cAAA;AACA;;AAEA,YAAA,MAAA,YAAA,GAAAc,0BAAA;AACA,cAAA,UAAA;AACA,cAAA,eAAA;AACA,cAAA,OAAA;AACA,cAAA,mBAAA;AACA,aAAA;AACA,YAAA,IAAA,YAAA,EAAA;AACA,cAAA,uBAAA,CAAA,IAAA,CAAA,YAAA,CAAA;AACA;AACA;;AAEA,UAAAC,2BAAA,CAAA,QAAA,GAAA,uBAAA,CAAA;AACA,SAAA,CAAA;AACA;AACA,KAAA;AACA,IAAA,YAAA,CAAA,KAAA,EAAA;AACA,MAAA,OAAAC,iCAAA,CAAA,KAAA,CAAA;AACA,KAAA;AACA,GAAA;AACA,CAAA,CAAA;;AAEA,MAAA,2BAAA,GAAAC,sBAAA,CAAA,4BAAA;;;;"}